{
  "stats": {
    "suites": 56,
    "tests": 306,
    "passes": 292,
    "pending": 0,
    "failures": 14,
    "testsRegistered": 306,
    "passPercent": 95.42483660130719,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2024-07-04T18:00:13.928Z",
    "end": "2024-07-06T17:57:01.609Z",
    "duration": 172607681
  },
  "results": [
    {
      "uuid": "3b5df7b6-94f8-47f8-b8af-66f6120e5c2f",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7be91022-f1f4-4d0e-9226-10efeabf0add",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 6459,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com');\ncy.get('.action-email').should('have.value', 'fake@email.com');\n// .type() with special character sequences\ncy.get('.action-email').type('{leftarrow}{rightarrow}{uparrow}{downarrow}');\ncy.get('.action-email').type('{del}{selectall}{backspace}');\n// .type() with key modifiers\ncy.get('.action-email').type('{alt}{option}'); //these are equivalent\ncy.get('.action-email').type('{ctrl}{control}'); //these are equivalent\ncy.get('.action-email').type('{meta}{command}{cmd}'); //these are equivalent\ncy.get('.action-email').type('{shift}');\n// Delay each keypress by 0.1 sec\ncy.get('.action-email').type('slow.typing@email.com', {\n  delay: 100\n});\ncy.get('.action-email').should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled')\n// Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n});\ncy.get('.action-disabled').should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "97371de2-6e86-42db-b78f-02480282c6f3",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 650,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus();\ncy.get('.action-focus').should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "393939ed-87f2-4874-94e1-7eb93a9ac07d",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 620,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur');\ncy.get('.action-blur').blur();\ncy.get('.action-blur').should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "9e3f6001-f0a5-4d58-a15b-ddb81a4ce276",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 772,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text');\ncy.get('.action-clear').should('have.value', 'Clear this text');\ncy.get('.action-clear').clear();\ncy.get('.action-clear').should('have.value', '');",
              "err": {},
              "uuid": "2260e52b-5d35-46ef-99e7-a06b10d098bc",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 1321,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit();\ncy.get('.action-form').next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "ca72fb6b-9e31-4bac-835a-ee0a935949a5",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 4739,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click();\n// You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight');\n// .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas');\ncy.get('#action-canvas').click(80, 75); // click 80px on x coord and 75px on y coord\ncy.get('#action-canvas').click(170, 75);\ncy.get('#action-canvas').click(80, 165);\ncy.get('#action-canvas').click(100, 185);\ncy.get('#action-canvas').click(125, 190);\ncy.get('#action-canvas').click(150, 185);\ncy.get('#action-canvas').click(170, 165);\n// click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n});\n// Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "3d6755db-81ff-4649-84a2-4594225d90bb",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 1515,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick();\ncy.get('.action-div').should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "5869fed2-457e-420d-b6b2-2af83b532e7b",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 403,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick();\ncy.get('.rightclick-action-div').should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "8dbf25e2-19b4-403d-a9d0-534e55f9aeb1",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 1136,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check();\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check();\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').should('be.checked');\n// .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1');\ncy.get('.action-radios [type=\"radio\"]').should('be.checked');\n// .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']);\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').should('be.checked');\n// Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n});\ncy.get('.action-checkboxes [disabled]').should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n});\ncy.get('.action-radios [type=\"radio\"]').should('be.checked');",
              "err": {},
              "uuid": "fc68e474-22aa-461c-a8d9-0653e8f10c82",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 1299,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck();\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').should('not.be.checked');\n// .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1');\ncy.get('.action-check [type=\"checkbox\"]').uncheck('checkbox1');\ncy.get('.action-check [type=\"checkbox\"][value=\"checkbox1\"]').should('not.be.checked');\n// .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']);\ncy.get('.action-check [type=\"checkbox\"]').uncheck(['checkbox1', 'checkbox3']);\ncy.get('.action-check [type=\"checkbox\"][value=\"checkbox1\"]').should('not.be.checked');\ncy.get('.action-check [type=\"checkbox\"][value=\"checkbox3\"]').should('not.be.checked');\n// Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n});\ncy.get('.action-check [disabled]').should('not.be.checked');",
              "err": {},
              "uuid": "b4449654-92d9-4eba-8851-fc3607e4f0eb",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 2294,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--');\n// Select option(s) with matching text content\ncy.get('.action-select').select('apples');\n// confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']);\ncy.get('.action-select-multiple')\n// when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas');\ncy.get('.action-select')\n// can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']);\ncy.get('.action-select-multiple').invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "9f78c02f-f754-4d11-9f2a-1ef397915367",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 339,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible');\n// scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView();\ncy.get('#scroll-horizontal button').should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible');\n// Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView();\ncy.get('#scroll-vertical button').should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible');\n// Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView();\ncy.get('#scroll-both button').should('be.visible');",
              "err": {},
              "uuid": "93b2d523-1a5c-47ae-ac41-f8e06590f493",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 308,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25);\ncy.get('.trigger-input-range').trigger('change');\ncy.get('.trigger-input-range').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "f0f0cb5f-e254-4fc3-ab6d-8e0b1090d6df",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right');\n// or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250);\n// or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%');\n// control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n});\n// control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "9ed38a2c-8be8-4053-b384-e8cabd758268",
              "parentUUID": "7be91022-f1f4-4d0e-9226-10efeabf0add",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "97371de2-6e86-42db-b78f-02480282c6f3",
            "393939ed-87f2-4874-94e1-7eb93a9ac07d",
            "9e3f6001-f0a5-4d58-a15b-ddb81a4ce276",
            "2260e52b-5d35-46ef-99e7-a06b10d098bc",
            "ca72fb6b-9e31-4bac-835a-ee0a935949a5",
            "3d6755db-81ff-4649-84a2-4594225d90bb",
            "5869fed2-457e-420d-b6b2-2af83b532e7b",
            "8dbf25e2-19b4-403d-a9d0-534e55f9aeb1",
            "fc68e474-22aa-461c-a8d9-0653e8f10c82",
            "b4449654-92d9-4eba-8851-fc3607e4f0eb",
            "9f78c02f-f754-4d11-9f2a-1ef397915367",
            "93b2d523-1a5c-47ae-ac41-f8e06590f493",
            "f0f0cb5f-e254-4fc3-ab6d-8e0b1090d6df",
            "9ed38a2c-8be8-4053-b384-e8cabd758268"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24136,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "009f13e7-0a2a-4dfb-8754-f8896eaeb22a",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "193a551b-ea5c-4d52-a1c3-e5a11d7582f6",
          "title": "Aliasing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 877,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn');\n// when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "b867da44-da3e-4875-a7e1-3326bb3ca942",
              "parentUUID": "193a551b-ea5c-4d52-a1c3-e5a11d7582f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 2432,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "b4c32b65-fe90-418b-b757-0ed9a434884e",
              "parentUUID": "193a551b-ea5c-4d52-a1c3-e5a11d7582f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b867da44-da3e-4875-a7e1-3326bb3ca942",
            "b4c32b65-fe90-418b-b757-0ed9a434884e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3309,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8d95dc9b-3616-44b8-b185-2ede52671b68",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "48663977-6531-4778-997f-137347835031",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9f621ed8-3f8e-4943-837d-4ece3c5b4028",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 1791,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first()\n// checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content')\n// chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td')\n// to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i);\n// a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last')\n// finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible');\n// for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "321c5225-aa4f-4c69-b88c-da78dd7a2bd1",
                  "parentUUID": "9f621ed8-3f8e-4943-837d-4ece3c5b4028",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 1772,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "abdf9398-be9d-431c-a9fb-99ad3b162542",
                  "parentUUID": "9f621ed8-3f8e-4943-837d-4ece3c5b4028",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "321c5225-aa4f-4c69-b88c-da78dd7a2bd1",
                "abdf9398-be9d-431c-a9fb-99ad3b162542"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3563,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b7593b93-4328-4888-8c2a-acd1b60de116",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 350,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n});\n// matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "fcd9851c-39cc-4c0c-aa30-cf3bbc2fa3b6",
                  "parentUUID": "b7593b93-4328-4888-8c2a-acd1b60de116",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 216,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  const texts = $p.map((i, el) => Cypress.$(el).text());\n  // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get();\n  // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3);\n  // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "b1a6273e-19b7-4929-a735-6e5b544db695",
                  "parentUUID": "b7593b93-4328-4888-8c2a-acd1b60de116",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 218,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div')\n// .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n})\n// .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "1cead98c-a904-49e0-9869-6e90de4f137f",
                  "parentUUID": "b7593b93-4328-4888-8c2a-acd1b60de116",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 233,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "8dc596a1-aa7a-4640-a59f-a5536766c5a4",
                  "parentUUID": "b7593b93-4328-4888-8c2a-acd1b60de116",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 228,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "ccbd3e43-95fe-4963-a0b1-9c3ad6b39c11",
                  "parentUUID": "b7593b93-4328-4888-8c2a-acd1b60de116",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 210,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "a4627094-51e2-4bbf-93b7-26debfe80dcc",
                  "parentUUID": "b7593b93-4328-4888-8c2a-acd1b60de116",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1694,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "65378d9c-4006-44bf-a4c5-edc389ec8c70",
                  "parentUUID": "b7593b93-4328-4888-8c2a-acd1b60de116",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fcd9851c-39cc-4c0c-aa30-cf3bbc2fa3b6",
                "b1a6273e-19b7-4929-a735-6e5b544db695",
                "1cead98c-a904-49e0-9869-6e90de4f137f",
                "8dc596a1-aa7a-4640-a59f-a5536766c5a4",
                "ccbd3e43-95fe-4963-a0b1-9c3ad6b39c11",
                "a4627094-51e2-4bbf-93b7-26debfe80dcc",
                "65378d9c-4006-44bf-a4c5-edc389ec8c70"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3149,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "0b186245-18e8-4a83-a5d8-13541380ab24",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ec9c545e-9a33-4ec7-a20c-49dacd9ca6b1",
          "title": "Connectors",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 1000,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "dbc94585-8162-4240-b966-d1f7be55c2be",
              "parentUUID": "ec9c545e-9a33-4ec7-a20c-49dacd9ca6b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 836,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li')\n// calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "ae714c7a-3b5f-4c65-8a48-7f50c402d46f",
              "parentUUID": "ec9c545e-9a33-4ec7-a20c-49dacd9ca6b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\ncy.get('.connectors-div').should('be.hidden');\n// https://on.cypress.io/invoke\n// call the jquery method 'show' on the 'div.container'\ncy.get('.connectors-div').invoke('show');\ncy.get('.connectors-div').should('be.visible');",
              "err": {},
              "uuid": "e9908122-8c5c-4d91-9448-d2bbb69cfdde",
              "parentUUID": "ec9c545e-9a33-4ec7-a20c-49dacd9ca6b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 220,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "e2fdd919-53a2-4735-989b-b0f52300fc79",
              "parentUUID": "ec9c545e-9a33-4ec7-a20c-49dacd9ca6b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "edf5e3ff-ea43-44fc-b818-bbf9a49aa493",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 241,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "35d33b76-dd16-4db7-b18c-ce93a52d9c41",
                  "parentUUID": "edf5e3ff-ea43-44fc-b818-bbf9a49aa493",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 381,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "4953ad88-180e-44b2-a20d-91525bf6ccdd",
                  "parentUUID": "edf5e3ff-ea43-44fc-b818-bbf9a49aa493",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 223,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "f1333787-e21e-47ec-8d6f-a8a8b2024f23",
                  "parentUUID": "edf5e3ff-ea43-44fc-b818-bbf9a49aa493",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 210,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "5e170198-539b-470c-9e82-adc638db9bd3",
                  "parentUUID": "edf5e3ff-ea43-44fc-b818-bbf9a49aa493",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "35d33b76-dd16-4db7-b18c-ce93a52d9c41",
                "4953ad88-180e-44b2-a20d-91525bf6ccdd",
                "f1333787-e21e-47ec-8d6f-a8a8b2024f23",
                "5e170198-539b-470c-9e82-adc638db9bd3"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1055,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "dbc94585-8162-4240-b966-d1f7be55c2be",
            "ae714c7a-3b5f-4c65-8a48-7f50c402d46f",
            "e9908122-8c5c-4d91-9448-d2bbb69cfdde",
            "e2fdd919-53a2-4735-989b-b0f52300fc79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2311,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1e6a2502-5af9-407f-a339-928a0c8124e0",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0dc8f0c1-1b81-4e95-a240-aed6218817d6",
          "title": "Cookies",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.getCookie() - get a browser cookie",
              "fullTitle": "Cookies cy.getCookie() - get a browser cookie",
              "timedOut": null,
              "duration": 942,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookie\ncy.get('#getCookie .set-a-cookie').click();\n// cy.getCookie() yields a cookie object\ncy.getCookie('token').should('have.property', 'value', '123ABC');",
              "err": {},
              "uuid": "787bef69-ea1a-469d-b44e-095cc6d4890b",
              "parentUUID": "0dc8f0c1-1b81-4e95-a240-aed6218817d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getCookies() - get browser cookies for the current domain",
              "fullTitle": "Cookies cy.getCookies() - get browser cookies for the current domain",
              "timedOut": null,
              "duration": 603,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookies\ncy.getCookies().should('be.empty');\ncy.get('#getCookies .set-a-cookie').click();\n// cy.getCookies() yields an array of cookies\ncy.getCookies().should('have.length', 1).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'token');\n  expect(cookies[0]).to.have.property('value', '123ABC');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n});",
              "err": {},
              "uuid": "67722305-47a1-41a8-b9df-638a80aaf649",
              "parentUUID": "0dc8f0c1-1b81-4e95-a240-aed6218817d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllCookies() - get all browser cookies",
              "fullTitle": "Cookies cy.getAllCookies() - get all browser cookies",
              "timedOut": null,
              "duration": 378,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\n// cy.getAllCookies() yields an array of cookies\ncy.getAllCookies().should('have.length', 2).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'key');\n  expect(cookies[0]).to.have.property('value', 'value');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n  expect(cookies[1]).to.have.property('name', 'key');\n  expect(cookies[1]).to.have.property('value', 'value');\n  expect(cookies[1]).to.have.property('httpOnly', false);\n  expect(cookies[1]).to.have.property('secure', false);\n  expect(cookies[1]).to.have.property('domain', '.example.com');\n  expect(cookies[1]).to.have.property('path');\n});",
              "err": {},
              "uuid": "da7a4228-d4a7-4020-a158-708329b228fa",
              "parentUUID": "0dc8f0c1-1b81-4e95-a240-aed6218817d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.setCookie() - set a browser cookie",
              "fullTitle": "Cookies cy.setCookie() - set a browser cookie",
              "timedOut": null,
              "duration": 279,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/setcookie\ncy.getCookies().should('be.empty');\ncy.setCookie('foo', 'bar');\n// cy.getCookie() yields a cookie object\ncy.getCookie('foo').should('have.property', 'value', 'bar');",
              "err": {},
              "uuid": "0817e19b-bef5-4f9b-b461-33d00afc9b17",
              "parentUUID": "0dc8f0c1-1b81-4e95-a240-aed6218817d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookie() - clear a browser cookie",
              "fullTitle": "Cookies cy.clearCookie() - clear a browser cookie",
              "timedOut": null,
              "duration": 360,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookie\ncy.getCookie('token').should('be.null');\ncy.get('#clearCookie .set-a-cookie').click();\ncy.getCookie('token').should('have.property', 'value', '123ABC');\n// cy.clearCookies() yields null\ncy.clearCookie('token');\ncy.getCookie('token').should('be.null');",
              "err": {},
              "uuid": "6313629b-7b42-45a6-95fa-a863e64ca706",
              "parentUUID": "0dc8f0c1-1b81-4e95-a240-aed6218817d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookies() - clear browser cookies for the current domain",
              "fullTitle": "Cookies cy.clearCookies() - clear browser cookies for the current domain",
              "timedOut": null,
              "duration": 1117,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookies\ncy.getCookies().should('be.empty');\ncy.get('#clearCookies .set-a-cookie').click();\ncy.getCookies().should('have.length', 1);\n// cy.clearCookies() yields null\ncy.clearCookies();\ncy.getCookies().should('be.empty');",
              "err": {},
              "uuid": "c70fa142-ca67-4940-a4d4-6291a4043b44",
              "parentUUID": "0dc8f0c1-1b81-4e95-a240-aed6218817d6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllCookies() - clear all browser cookies",
              "fullTitle": "Cookies cy.clearAllCookies() - clear all browser cookies",
              "timedOut": null,
              "duration": 290,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\ncy.getAllCookies().should('have.length', 2);\n// cy.clearAllCookies() yields null\ncy.clearAllCookies();\ncy.getAllCookies().should('be.empty');",
              "err": {},
              "uuid": "deda12d8-5e70-443d-bd66-7235e2ad2c7f",
              "parentUUID": "0dc8f0c1-1b81-4e95-a240-aed6218817d6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "787bef69-ea1a-469d-b44e-095cc6d4890b",
            "67722305-47a1-41a8-b9df-638a80aaf649",
            "da7a4228-d4a7-4020-a158-708329b228fa",
            "0817e19b-bef5-4f9b-b461-33d00afc9b17",
            "6313629b-7b42-45a6-95fa-a863e64ca706",
            "c70fa142-ca67-4940-a4d4-6291a4043b44",
            "deda12d8-5e70-443d-bd66-7235e2ad2c7f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3969,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1ea2e45a-2991-4cb9-b17c-4c25363ee297",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "881cb643-c1b0-48c5-8f40-dcf57067a5ce",
          "title": "Cypress APIs",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "da79def3-161c-4da4-a64a-8f3aa3c5eb78",
              "title": "Cypress.Commands",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".add() - create a custom command",
                  "fullTitle": "Cypress APIs Cypress.Commands .add() - create a custom command",
                  "timedOut": null,
                  "duration": 631,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Commands.add('console', {\n  prevSubject: true\n}, (subject, method) => {\n  // the previous subject is automatically received\n  // and the commands arguments are shifted\n  // allow us to change the console method used\n  method = method || 'log';\n  // log the subject to the console\n  console[method]('The subject is', subject);\n  // whatever we return becomes the new subject\n  // we don't want to change the subject so\n  // we return whatever was passed in\n  return subject;\n});\ncy.get('button').console('info').then($button => {\n  // subject is still $button\n});",
                  "err": {},
                  "uuid": "19f1612f-7753-4a86-9371-1b6d04ee11d2",
                  "parentUUID": "da79def3-161c-4da4-a64a-8f3aa3c5eb78",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "19f1612f-7753-4a86-9371-1b6d04ee11d2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 631,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "423b85cb-a1c4-4eb8-b4a8-0105bb8cb2d9",
              "title": "Cypress.Cookies",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".debug() - enable or disable debugging",
                  "fullTitle": "Cypress APIs Cypress.Cookies .debug() - enable or disable debugging",
                  "timedOut": null,
                  "duration": 243,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Cookies.debug(true);\n// Cypress will now log in the console when\n// cookies are set or cleared\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');",
                  "err": {},
                  "uuid": "9b9a9460-34a3-4f43-b1d2-281bd49dd5a2",
                  "parentUUID": "423b85cb-a1c4-4eb8-b4a8-0105bb8cb2d9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9b9a9460-34a3-4f43-b1d2-281bd49dd5a2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 243,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "c7a86c76-d637-4168-865a-7b96903a0453",
              "title": "Cypress.arch",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get CPU architecture name of underlying OS",
                  "fullTitle": "Cypress APIs Cypress.arch Get CPU architecture name of underlying OS",
                  "timedOut": null,
                  "duration": 191,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/arch\nexpect(Cypress.arch).to.exist;",
                  "err": {},
                  "uuid": "5bb8f173-70b8-48b7-993b-4923add1c5fa",
                  "parentUUID": "c7a86c76-d637-4168-865a-7b96903a0453",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "5bb8f173-70b8-48b7-993b-4923add1c5fa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 191,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da58a1da-c14b-4afd-aaf3-edee1ad5ff58",
              "title": "Cypress.config()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get and set configuration options",
                  "fullTitle": "Cypress APIs Cypress.config() Get and set configuration options",
                  "timedOut": null,
                  "duration": 1619,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/config\nlet myConfig = Cypress.config();\nexpect(myConfig).to.have.property('animationDistanceThreshold', 5);\nexpect(myConfig).to.have.property('baseUrl', null);\nexpect(myConfig).to.have.property('defaultCommandTimeout', 4000);\nexpect(myConfig).to.have.property('requestTimeout', 5000);\nexpect(myConfig).to.have.property('responseTimeout', 30000);\nexpect(myConfig).to.have.property('viewportHeight', 660);\nexpect(myConfig).to.have.property('viewportWidth', 1000);\nexpect(myConfig).to.have.property('pageLoadTimeout', 60000);\nexpect(myConfig).to.have.property('waitForAnimations', true);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(60000);\n// this will change the config for the rest of your tests!\nCypress.config('pageLoadTimeout', 20000);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(20000);\nCypress.config('pageLoadTimeout', 60000);",
                  "err": {
                    "message": "AssertionError: expected { Object (configFile, reporter, ...) } to have property 'baseUrl' of null, but got 'http://localhost:8080/#/'",
                    "estack": "AssertionError: expected { Object (configFile, reporter, ...) } to have property 'baseUrl' of null, but got 'http://localhost:8080/#/'\n    at Context.eval (webpack:///./cypress/e2e/2-advanced-examples/cypress_api.cy.js:77:31)",
                    "diff": null
                  },
                  "uuid": "2b3e3362-ff77-4dca-8479-2a28fbf7491b",
                  "parentUUID": "da58a1da-c14b-4afd-aaf3-edee1ad5ff58",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "2b3e3362-ff77-4dca-8479-2a28fbf7491b"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1619,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "3006d9af-ebd5-4a19-9876-9bb4a9b56952",
              "title": "Cypress.dom",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".isHidden() - determine if a DOM element is hidden",
                  "fullTitle": "Cypress APIs Cypress.dom .isHidden() - determine if a DOM element is hidden",
                  "timedOut": null,
                  "duration": 246,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\nlet visibleP = Cypress.$('.dom-p p.visible').get(0);\n// our first paragraph has css class 'hidden'\nexpect(Cypress.dom.isHidden(hiddenP)).to.be.true;\nexpect(Cypress.dom.isHidden(visibleP)).to.be.false;",
                  "err": {},
                  "uuid": "a38a2850-8e6a-4cd4-9bcb-c28e7f95d09b",
                  "parentUUID": "3006d9af-ebd5-4a19-9876-9bb4a9b56952",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a38a2850-8e6a-4cd4-9bcb-c28e7f95d09b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 246,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b6fb61f2-4d42-4c17-92c0-1a120f55da61",
              "title": "Cypress.env()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get environment variables",
                  "fullTitle": "Cypress APIs Cypress.env() Get environment variables",
                  "timedOut": null,
                  "duration": 354,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/env\n// set multiple environment variables\nCypress.env({\n  host: 'veronica.dev.local',\n  api_server: 'http://localhost:8888/v1/'\n});\n// get environment variable\nexpect(Cypress.env('host')).to.eq('veronica.dev.local');\n// set environment variable\nCypress.env('api_server', 'http://localhost:8888/v2/');\nexpect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/');\n// get all environment variable\nexpect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\nexpect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');",
                  "err": {},
                  "uuid": "29a9fece-58f9-4654-a02a-a42997602de7",
                  "parentUUID": "b6fb61f2-4d42-4c17-92c0-1a120f55da61",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29a9fece-58f9-4654-a02a-a42997602de7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 354,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "85aa98f9-6b5d-4149-8abc-cdd6d8ecae4c",
              "title": "Cypress.log",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Control what is printed to the Command Log",
                  "fullTitle": "Cypress APIs Cypress.log Control what is printed to the Command Log",
                  "timedOut": null,
                  "duration": 240,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/cypress-log",
                  "err": {},
                  "uuid": "f9e79fbf-5afc-497f-9105-d5698a337306",
                  "parentUUID": "85aa98f9-6b5d-4149-8abc-cdd6d8ecae4c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f9e79fbf-5afc-497f-9105-d5698a337306"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 240,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d5250aaa-7c33-4e90-9406-82535872f34a",
              "title": "Cypress.platform",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get underlying OS name",
                  "fullTitle": "Cypress APIs Cypress.platform Get underlying OS name",
                  "timedOut": null,
                  "duration": 519,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/platform\nexpect(Cypress.platform).to.be.exist;",
                  "err": {},
                  "uuid": "fd6b1447-8d40-4639-a80c-98bcc4511d18",
                  "parentUUID": "d5250aaa-7c33-4e90-9406-82535872f34a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fd6b1447-8d40-4639-a80c-98bcc4511d18"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 519,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "9d4bc45a-b3e7-45b6-9c5a-138b680ddda7",
              "title": "Cypress.version",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current version of Cypress being run",
                  "fullTitle": "Cypress APIs Cypress.version Get current version of Cypress being run",
                  "timedOut": null,
                  "duration": 266,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/version\nexpect(Cypress.version).to.be.exist;",
                  "err": {},
                  "uuid": "55a4b26a-e0e5-480c-a03c-94f0bbe9bb54",
                  "parentUUID": "9d4bc45a-b3e7-45b6-9c5a-138b680ddda7",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55a4b26a-e0e5-480c-a03c-94f0bbe9bb54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 266,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "12717943-a0d3-480f-9829-7c1165b9648b",
              "title": "Cypress.spec",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current spec information",
                  "fullTitle": "Cypress APIs Cypress.spec Get current spec information",
                  "timedOut": null,
                  "duration": 400,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/spec\n// wrap the object so we can inspect it easily by clicking in the command log\ncy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);",
                  "err": {},
                  "uuid": "730e459a-d62a-41e2-8acf-80bc1730902a",
                  "parentUUID": "12717943-a0d3-480f-9829-7c1165b9648b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "730e459a-d62a-41e2-8acf-80bc1730902a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 400,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1a58ab81-2fa7-4de0-9422-93880f165995",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "576bd12b-cea0-4c82-b84b-997292a8da3e",
          "title": "Files",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 1069,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\n// when application makes an Ajax request matching \"GET **/comments/*\"\n// Cypress will intercept it and reply with the object in `example.json` fixture\ncy.intercept('GET', '**/comments/*', {\n  fixture: 'example.json'\n}).as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "ff08ec96-c363-4caa-941d-7a3b056c7709",
              "parentUUID": "576bd12b-cea0-4c82-b84b-997292a8da3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 581,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context').to.deep.equal(requiredExample);\n// or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\ncy.wrap(this.example).should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "5b5242cb-0260-4911-a6fc-7ef7009d4522",
              "parentUUID": "576bd12b-cea0-4c82-b84b-997292a8da3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 256,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile(Cypress.config('configFile')).then(config => {\n  expect(config).to.be.an('string');\n});",
              "err": {},
              "uuid": "45443c01-84d1-46b2-b8e0-94409ec9daea",
              "parentUUID": "576bd12b-cea0-4c82-b84b-997292a8da3e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 1930,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(users => {\n  expect(users[0].name).to.exist;\n});\n// JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n  id: 8739,\n  name: 'Jane',\n  email: 'jane@example.com'\n});\ncy.fixture('profile').should(profile => {\n  expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "3ae6d715-51b5-4588-a0c4-351f8ec1faa6",
              "parentUUID": "576bd12b-cea0-4c82-b84b-997292a8da3e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff08ec96-c363-4caa-941d-7a3b056c7709",
            "5b5242cb-0260-4911-a6fc-7ef7009d4522",
            "45443c01-84d1-46b2-b8e0-94409ec9daea",
            "3ae6d715-51b5-4588-a0c4-351f8ec1faa6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3836,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "213a9363-79a9-4035-8fa6-99c9c9243513",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "144d1aba-0f5a-43cb-a8b8-2f0f019c9604",
          "title": "Location",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.hash() - get the current URL hash",
              "fullTitle": "Location cy.hash() - get the current URL hash",
              "timedOut": null,
              "duration": 610,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/hash\ncy.hash().should('be.empty');",
              "err": {},
              "uuid": "1de33545-dccd-47f3-af81-1b4b4a0720ba",
              "parentUUID": "144d1aba-0f5a-43cb-a8b8-2f0f019c9604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.location() - get window.location",
              "fullTitle": "Location cy.location() - get window.location",
              "timedOut": null,
              "duration": 231,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/location\ncy.location().should(location => {\n  expect(location.hash).to.be.empty;\n  expect(location.href).to.eq('https://example.cypress.io/commands/location');\n  expect(location.host).to.eq('example.cypress.io');\n  expect(location.hostname).to.eq('example.cypress.io');\n  expect(location.origin).to.eq('https://example.cypress.io');\n  expect(location.pathname).to.eq('/commands/location');\n  expect(location.port).to.eq('');\n  expect(location.protocol).to.eq('https:');\n  expect(location.search).to.be.empty;\n});",
              "err": {},
              "uuid": "a3e9f67d-3c26-4424-b286-a1f905639b91",
              "parentUUID": "144d1aba-0f5a-43cb-a8b8-2f0f019c9604",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.url() - get the current URL",
              "fullTitle": "Location cy.url() - get the current URL",
              "timedOut": null,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/url\ncy.url().should('eq', 'https://example.cypress.io/commands/location');",
              "err": {},
              "uuid": "40590741-4cee-460f-96a2-11f7d96f2f19",
              "parentUUID": "144d1aba-0f5a-43cb-a8b8-2f0f019c9604",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1de33545-dccd-47f3-af81-1b4b4a0720ba",
            "a3e9f67d-3c26-4424-b286-a1f905639b91",
            "40590741-4cee-460f-96a2-11f7d96f2f19"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1040,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "583fa9d2-581a-4160-b24d-3bb4ffa5bf86",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ae7d137f-3d8e-4a35-a9d5-ff838e1377c6",
          "title": "Misc",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.exec() - execute a system command",
              "fullTitle": "Misc cy.exec() - execute a system command",
              "timedOut": null,
              "duration": 1238,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// execute a system command.\n// so you can take actions necessary for\n// your test outside the scope of Cypress.\n// https://on.cypress.io/exec\n// we can use Cypress.platform string to\n// select appropriate command\n// https://on.cypress/io/platform\ncy.log(`Platform ${Cypress.platform} architecture ${Cypress.arch}`);\n// on CircleCI Windows build machines we have a failure to run bash shell\n// https://github.com/cypress-io/cypress/issues/5169\n// so skip some of the tests by passing flag \"--env circle=true\"\nconst isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\nif (isCircleOnWindows) {\n  cy.log('Skipping test on CircleCI');\n  return;\n}\n// cy.exec problem on Shippable CI\n// https://github.com/cypress-io/cypress/issues/6718\nconst isShippable = Cypress.platform === 'linux' && Cypress.env('shippable');\nif (isShippable) {\n  cy.log('Skipping test on ShippableCI');\n  return;\n}\ncy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\nif (Cypress.platform === 'win32') {\n  cy.exec(`print ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n} else {\n  cy.exec(`cat ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n  cy.exec('pwd').its('code').should('eq', 0);\n}",
              "err": {},
              "uuid": "5b6bdcb9-0844-4b73-92a7-11e13a90854f",
              "parentUUID": "ae7d137f-3d8e-4a35-a9d5-ff838e1377c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.focused() - get the DOM element that has focus",
              "fullTitle": "Misc cy.focused() - get the DOM element that has focus",
              "timedOut": null,
              "duration": 625,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focused\ncy.get('.misc-form').find('#name').click();\ncy.focused().should('have.id', 'name');\ncy.get('.misc-form').find('#description').click();\ncy.focused().should('have.id', 'description');",
              "err": {},
              "uuid": "c4fb7d02-9d90-47a0-8d29-f560e9aa996c",
              "parentUUID": "ae7d137f-3d8e-4a35-a9d5-ff838e1377c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wrap() - wrap an object",
              "fullTitle": "Misc cy.wrap() - wrap an object",
              "timedOut": null,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/wrap\ncy.wrap({\n  foo: 'bar'\n}).should('have.property', 'foo').and('include', 'bar');",
              "err": {},
              "uuid": "b2bfcb96-9e30-4c19-9b22-780b18c6b1ce",
              "parentUUID": "ae7d137f-3d8e-4a35-a9d5-ff838e1377c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "16197817-b37e-4860-bfc5-db6c83181d87",
              "title": "Cypress.Screenshot",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cy.screenshot() - take a screenshot",
                  "fullTitle": "Misc Cypress.Screenshot cy.screenshot() - take a screenshot",
                  "timedOut": null,
                  "duration": 2325,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/screenshot\ncy.screenshot('my-image');",
                  "err": {},
                  "uuid": "3f10d4f8-d8a2-46ad-b417-f8e3560cd82a",
                  "parentUUID": "16197817-b37e-4860-bfc5-db6c83181d87",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cypress.Screenshot.defaults() - change default config of screenshots",
                  "fullTitle": "Misc Cypress.Screenshot Cypress.Screenshot.defaults() - change default config of screenshots",
                  "timedOut": null,
                  "duration": 563,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Screenshot.defaults({\n  blackout: ['.foo'],\n  capture: 'viewport',\n  clip: {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  },\n  scale: false,\n  disableTimersAndAnimations: true,\n  screenshotOnRunFailure: true,\n  onBeforeScreenshot() {},\n  onAfterScreenshot() {}\n});",
                  "err": {},
                  "uuid": "d27dd190-ef4f-4884-9d97-7c661933bd6a",
                  "parentUUID": "16197817-b37e-4860-bfc5-db6c83181d87",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3f10d4f8-d8a2-46ad-b417-f8e3560cd82a",
                "d27dd190-ef4f-4884-9d97-7c661933bd6a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2888,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "5b6bdcb9-0844-4b73-92a7-11e13a90854f",
            "c4fb7d02-9d90-47a0-8d29-f560e9aa996c",
            "b2bfcb96-9e30-4c19-9b22-780b18c6b1ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2069,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "148be9bd-5d09-4baf-858b-a03461a30d3b",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "00c24802-50be-4837-aed1-390f39d43f1e",
          "title": "Navigation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.go() - go back or forward in the browser's history",
              "fullTitle": "Navigation cy.go() - go back or forward in the browser's history",
              "timedOut": null,
              "duration": 2019,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/go\ncy.location('pathname').should('include', 'navigation');\ncy.go('back');\ncy.location('pathname').should('not.include', 'navigation');\ncy.go('forward');\ncy.location('pathname').should('include', 'navigation');\n// clicking back\ncy.go(-1);\ncy.location('pathname').should('not.include', 'navigation');\n// clicking forward\ncy.go(1);\ncy.location('pathname').should('include', 'navigation');",
              "err": {},
              "uuid": "81bab451-87d8-446c-930e-072efc66de40",
              "parentUUID": "00c24802-50be-4837-aed1-390f39d43f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.reload() - reload the page",
              "fullTitle": "Navigation cy.reload() - reload the page",
              "timedOut": null,
              "duration": 1150,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/reload\ncy.reload();\n// reload the page without using the cache\ncy.reload(true);",
              "err": {},
              "uuid": "d2a6723c-002b-4d9a-b0e6-582d3090620b",
              "parentUUID": "00c24802-50be-4837-aed1-390f39d43f1e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.visit() - visit a remote url",
              "fullTitle": "Navigation cy.visit() - visit a remote url",
              "timedOut": null,
              "duration": 992,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/visit\n// Visit any sub-domain of your current domain\n// Pass options to the visit\ncy.visit('https://example.cypress.io/commands/navigation', {\n  timeout: 50000,\n  // increase total time for the visit to resolve\n  onBeforeLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  },\n  onLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  }\n});",
              "err": {},
              "uuid": "3958ee0b-578d-48c7-8017-77abdfb66c6c",
              "parentUUID": "00c24802-50be-4837-aed1-390f39d43f1e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81bab451-87d8-446c-930e-072efc66de40",
            "d2a6723c-002b-4d9a-b0e6-582d3090620b",
            "3958ee0b-578d-48c7-8017-77abdfb66c6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4161,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a40d6906-443e-4a6c-a52b-311da63bfb1d",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4f56714c-bd80-4526-9b57-6ce1f0fc7b40",
          "title": "Network Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 1560,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n  expect(response.status).to.eq(200);\n  // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "0336c5c7-2b77-496d-9577-2a30ce2cb7ea",
              "parentUUID": "4f56714c-bd80-4526-9b57-6ce1f0fc7b40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 782,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "10429f52-8421-48af-9696-800a92788eff",
              "parentUUID": "4f56714c-bd80-4526-9b57-6ce1f0fc7b40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 867,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "06444265-7eaa-41d3-8297-333ea8557f27",
              "parentUUID": "4f56714c-bd80-4526-9b57-6ce1f0fc7b40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 954,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property('id').to.be.a('number');\n  // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n})\n// note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    title: 'Cypress Test Runner'\n  });\n  // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property('id').to.be.a('number').and.to.be.gt(100);\n  // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "403ccc25-e15c-41d6-8896-acf52344cb87",
              "parentUUID": "4f56714c-bd80-4526-9b57-6ce1f0fc7b40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 888,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE 👀\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "a0e01b40-546c-4dff-87dd-ef81430b27dc",
              "parentUUID": "4f56714c-bd80-4526-9b57-6ce1f0fc7b40",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 1996,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/intercept\nlet message = 'whoa, this comment does not exist';\n// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);\n// Listen to POST to comments\ncy.intercept('POST', '**/comments').as('postComment');\n// we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include('email');\n  expect(request.headers).to.have.property('content-type');\n  expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n});\n// Stub a response to PUT comments/ ****\ncy.intercept({\n  method: 'PUT',\n  url: '**/comments/*'\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    'access-control-allow-origin': '*'\n  },\n  delayMs: 500\n}).as('putComment');\n// we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment');\n// our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "8115aca4-bffe-4c3f-be13-a9d38721891d",
              "parentUUID": "4f56714c-bd80-4526-9b57-6ce1f0fc7b40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0336c5c7-2b77-496d-9577-2a30ce2cb7ea",
            "10429f52-8421-48af-9696-800a92788eff",
            "06444265-7eaa-41d3-8297-333ea8557f27",
            "403ccc25-e15c-41d6-8896-acf52344cb87",
            "a0e01b40-546c-4dff-87dd-ef81430b27dc",
            "8115aca4-bffe-4c3f-be13-a9d38721891d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7047,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "91729f8c-a49c-4a36-a730-425d94260093",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "30b43a54-2098-4c24-b088-3d8c1fb88c8c",
          "title": "Querying",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.get() - query DOM elements",
              "fullTitle": "Querying cy.get() - query DOM elements",
              "timedOut": null,
              "duration": 683,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/get\ncy.get('#query-btn').should('contain', 'Button');\ncy.get('.query-btn').should('contain', 'Button');\ncy.get('#querying .well>button:first').should('contain', 'Button');\n//              ↲\n// Use CSS selectors just like jQuery\ncy.get('[data-test-id=\"test-example\"]').should('have.class', 'example');\n// 'cy.get()' yields jQuery object, you can get its attribute\n// by invoking `.attr()` method\ncy.get('[data-test-id=\"test-example\"]').invoke('attr', 'data-test-id').should('equal', 'test-example');\n// or you can get element's CSS property\ncy.get('[data-test-id=\"test-example\"]').invoke('css', 'position').should('equal', 'static');\n// or use assertions directly during 'cy.get()'\n// https://on.cypress.io/assertions\ncy.get('[data-test-id=\"test-example\"]').should('have.attr', 'data-test-id', 'test-example').and('have.css', 'position', 'static');",
              "err": {},
              "uuid": "60fd348c-cfba-44b4-a977-70dcc0244078",
              "parentUUID": "30b43a54-2098-4c24-b088-3d8c1fb88c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.contains() - query DOM elements with matching content",
              "fullTitle": "Querying cy.contains() - query DOM elements with matching content",
              "timedOut": null,
              "duration": 278,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/contains\ncy.get('.query-list').contains('bananas').should('have.class', 'third');\n// we can pass a regexp to `.contains()`\ncy.get('.query-list').contains(/^b\\w+/).should('have.class', 'third');\ncy.get('.query-list').contains('apples').should('have.class', 'first');\n// passing a selector to contains will\n// yield the selector containing the text\ncy.get('#querying').contains('ul', 'oranges').should('have.class', 'query-list');\ncy.get('.query-button').contains('Save Form').should('have.class', 'btn');",
              "err": {},
              "uuid": "8e943474-0758-4017-8174-24787c4d0b93",
              "parentUUID": "30b43a54-2098-4c24-b088-3d8c1fb88c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".within() - query DOM elements within a specific element",
              "fullTitle": "Querying .within() - query DOM elements within a specific element",
              "timedOut": null,
              "duration": 233,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/within\ncy.get('.query-form').within(() => {\n  cy.get('input:first').should('have.attr', 'placeholder', 'Email');\n  cy.get('input:last').should('have.attr', 'placeholder', 'Password');\n});",
              "err": {},
              "uuid": "37084bf5-ebf2-4147-912f-136b7c244f2a",
              "parentUUID": "30b43a54-2098-4c24-b088-3d8c1fb88c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.root() - query the root DOM element",
              "fullTitle": "Querying cy.root() - query the root DOM element",
              "timedOut": null,
              "duration": 345,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/root\n// By default, root is the document\ncy.root().should('match', 'html');\ncy.get('.query-ul').within(() => {\n  // In this within, the root is now the ul DOM element\n  cy.root().should('have.class', 'query-ul');\n});",
              "err": {},
              "uuid": "422e7d98-5e3c-4ece-a6c0-73d6552dbee3",
              "parentUUID": "30b43a54-2098-4c24-b088-3d8c1fb88c8c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "best practices - selecting elements",
              "fullTitle": "Querying best practices - selecting elements",
              "timedOut": null,
              "duration": 1281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/best-practices#Selecting-Elements\ncy.get('[data-cy=best-practices-selecting-elements]').within(() => {\n  // Worst - too generic, no context\n  cy.get('button').click();\n  // Bad. Coupled to styling. Highly subject to change.\n  cy.get('.btn.btn-large').click();\n  // Average. Coupled to the `name` attribute which has HTML semantics.\n  cy.get('[name=submission]').click();\n  // Better. But still coupled to styling or JS event listeners.\n  cy.get('#main').click();\n  // Slightly better. Uses an ID but also ensures the element\n  // has an ARIA role attribute\n  cy.get('#main[role=button]').click();\n  // Much better. But still coupled to text content that may change.\n  cy.contains('Submit').click();\n  // Best. Insulated from all changes.\n  cy.get('[data-cy=submit]').click();\n});",
              "err": {},
              "uuid": "2c00cc06-053d-45f9-a530-ed2054b2a386",
              "parentUUID": "30b43a54-2098-4c24-b088-3d8c1fb88c8c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60fd348c-cfba-44b4-a977-70dcc0244078",
            "8e943474-0758-4017-8174-24787c4d0b93",
            "37084bf5-ebf2-4147-912f-136b7c244f2a",
            "422e7d98-5e3c-4ece-a6c0-73d6552dbee3",
            "2c00cc06-053d-45f9-a530-ed2054b2a386"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2820,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "75a000dc-74f5-47a3-b6d9-eaf7483f94f1",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "56e153d7-bc18-4c64-91f8-0b0ef731b150",
          "title": "Spies, Stubs, and Clock",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.spy() - wrap a method in a spy",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() - wrap a method in a spy",
              "timedOut": null,
              "duration": 536,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spy\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  foo() {}\n};\nconst spy = cy.spy(obj, 'foo').as('anyArgs');\nobj.foo();\nexpect(spy).to.be.called;",
              "err": {},
              "uuid": "440a414d-ba4a-4f01-90f1-3bf861ffc0dd",
              "parentUUID": "56e153d7-bc18-4c64-91f8-0b0ef731b150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.spy() retries until assertions pass",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() retries until assertions pass",
              "timedOut": null,
              "duration": 2552,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * Prints the argument passed\n   * @param x {any}\n  */\n  foo(x) {\n    console.log('obj.foo called with', x);\n  }\n};\ncy.spy(obj, 'foo').as('foo');\nsetTimeout(() => {\n  obj.foo('first');\n}, 500);\nsetTimeout(() => {\n  obj.foo('second');\n}, 2500);\ncy.get('@foo').should('have.been.calledTwice');",
              "err": {},
              "uuid": "61696f9d-d7a0-4825-8ea0-5087903664f2",
              "parentUUID": "56e153d7-bc18-4c64-91f8-0b0ef731b150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() - create a stub and/or replace a function with stub",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() - create a stub and/or replace a function with stub",
              "timedOut": null,
              "duration": 604,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/stub\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * prints both arguments to the console\n   * @param a {string}\n   * @param b {string}\n  */\n  foo(a, b) {\n    console.log('a', a, 'b', b);\n  }\n};\nconst stub = cy.stub(obj, 'foo').as('foo');\nobj.foo('foo', 'bar');\nexpect(stub).to.be.called;",
              "err": {},
              "uuid": "e538ef9b-1528-422d-adcf-c1f623a293e7",
              "parentUUID": "56e153d7-bc18-4c64-91f8-0b0ef731b150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clock() - control time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.clock() - control time in the browser",
              "timedOut": null,
              "duration": 423,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clock\n// create the date in UTC so it's always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#clock-div').click();\ncy.get('#clock-div').should('have.text', '1489449600');",
              "err": {},
              "uuid": "cfdcf2d7-625f-4e81-a2d3-a6ba916817b9",
              "parentUUID": "56e153d7-bc18-4c64-91f8-0b0ef731b150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.tick() - move time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.tick() - move time in the browser",
              "timedOut": null,
              "duration": 391,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/tick\n// create the date in UTC so it's always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#tick-div').click();\ncy.get('#tick-div').should('have.text', '1489449600');\ncy.tick(10000); // 10 seconds passed\ncy.get('#tick-div').click();\ncy.get('#tick-div').should('have.text', '1489449610');",
              "err": {},
              "uuid": "86d26781-94b8-49c1-bc8d-d2136cedbfd5",
              "parentUUID": "56e153d7-bc18-4c64-91f8-0b0ef731b150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() matches depending on arguments",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() matches depending on arguments",
              "timedOut": null,
              "duration": 41,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n  */\n  greet(name) {\n    return `Hello, ${name}!`;\n  }\n};\ncy.stub(greeter, 'greet').callThrough() // if you want non-matched calls to call the real method\n.withArgs(Cypress.sinon.match.string).returns('Hi').withArgs(Cypress.sinon.match.number).throws(new Error('Invalid name'));\nexpect(greeter.greet('World')).to.equal('Hi');\nexpect(() => greeter.greet(42)).to.throw('Invalid name');\nexpect(greeter.greet).to.have.been.calledTwice;\n// non-matched calls goes the actual method\nexpect(greeter.greet()).to.equal('Hello, undefined!');",
              "err": {},
              "uuid": "323f48e4-1ed8-49c5-9136-dba176928181",
              "parentUUID": "56e153d7-bc18-4c64-91f8-0b0ef731b150",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "matches call arguments using Sinon matchers",
              "fullTitle": "Spies, Stubs, and Clock matches call arguments using Sinon matchers",
              "timedOut": null,
              "duration": 59,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst calculator = {\n  /**\n   * returns the sum of two arguments\n   * @param a {number}\n   * @param b {number}\n  */\n  add(a, b) {\n    return a + b;\n  }\n};\nconst spy = cy.spy(calculator, 'add').as('add');\nexpect(calculator.add(2, 3)).to.equal(5);\n// if we want to assert the exact values used during the call\nexpect(spy).to.be.calledWith(2, 3);\n// let's confirm \"add\" method was called with two numbers\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number);\n// alternatively, provide the value to match\nexpect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3));\n// match any value\nexpect(spy).to.be.calledWith(Cypress.sinon.match.any, 3);\n// match any value from a list\nexpect(spy).to.be.calledWith(Cypress.sinon.match.in([1, 2, 3]), 3);\n/**\n * Returns true if the given number is even\n * @param {number} x\n */\nconst isEven = x => x % 2 === 0;\n// expect the value to pass a custom predicate function\n// the second argument to \"sinon.match(predicate, message)\" is\n// shown if the predicate does not pass and assertion fails\nexpect(spy).to.be.calledWith(Cypress.sinon.match(isEven, 'isEven'), 3);\n/**\n * Returns a function that checks if a given number is larger than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isGreaterThan = limit => x => x > limit;\n/**\n * Returns a function that checks if a given number is less than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isLessThan = limit => x => x < limit;\n// you can combine several matchers using \"and\", \"or\"\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), '> 2').and(Cypress.sinon.match(isLessThan(4), '< 4')));\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), '> 200').or(Cypress.sinon.match(3)));\n// matchers can be used from BDD assertions\ncy.get('@add').should('have.been.calledWith', Cypress.sinon.match.number, Cypress.sinon.match(3));\n// you can alias matchers for shorter test code\nconst {\n  match: M\n} = Cypress.sinon;\ncy.get('@add').should('have.been.calledWith', M.number, M(3));",
              "err": {},
              "uuid": "f518a1ee-6c7d-46cd-ad47-1ee39f1b15d6",
              "parentUUID": "56e153d7-bc18-4c64-91f8-0b0ef731b150",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "440a414d-ba4a-4f01-90f1-3bf861ffc0dd",
            "61696f9d-d7a0-4825-8ea0-5087903664f2",
            "e538ef9b-1528-422d-adcf-c1f623a293e7",
            "cfdcf2d7-625f-4e81-a2d3-a6ba916817b9",
            "86d26781-94b8-49c1-bc8d-d2136cedbfd5",
            "323f48e4-1ed8-49c5-9136-dba176928181",
            "f518a1ee-6c7d-46cd-ad47-1ee39f1b15d6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4606,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3e9c7083-2578-4ea9-bbdd-12de9686e5cf",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f4d7f8d1-4ee6-48d2-b27e-7670e25bb8aa",
          "title": "Local Storage / Session Storage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "fullTitle": "Local Storage / Session Storage cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "timedOut": null,
              "duration": 1062,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearlocalstorage\ncy.get('.ls-btn').click();\ncy.get('.ls-btn').should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\ncy.clearLocalStorage();\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.be.null;\n  expect(localStorage.getItem('prop3')).to.be.null;\n});\ncy.get('.ls-btn').click();\ncy.get('.ls-btn').should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear key matching string in localStorage\ncy.clearLocalStorage('prop1');\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\ncy.get('.ls-btn').click();\ncy.get('.ls-btn').should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear keys matching regex in localStorage\ncy.clearLocalStorage(/prop1|2/);\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.be.null;\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});",
              "err": {},
              "uuid": "5ed12984-dcda-4d67-8df5-450b4f8a8fbf",
              "parentUUID": "f4d7f8d1-4ee6-48d2-b27e-7670e25bb8aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "timedOut": null,
              "duration": 480,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getalllocalstorage\ncy.get('.ls-btn').click();\n// getAllLocalStorage() yields a map of origins to localStorage values\ncy.getAllLocalStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if localStorage is set on them\n    'https://example.cypress.io': {\n      'prop1': 'red',\n      'prop2': 'blue',\n      'prop3': 'magenta'\n    }\n  });\n});",
              "err": {},
              "uuid": "cbaba1d1-67e6-48e1-8978-ceccaa90f22b",
              "parentUUID": "f4d7f8d1-4ee6-48d2-b27e-7670e25bb8aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "timedOut": null,
              "duration": 348,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearalllocalstorage\ncy.get('.ls-btn').click();\n// clearAllLocalStorage() yields null\ncy.clearAllLocalStorage();\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.be.null;\n  expect(localStorage.getItem('prop3')).to.be.null;\n});",
              "err": {},
              "uuid": "160c8c1c-0fd1-4d2d-8252-bfc9205ec0e2",
              "parentUUID": "f4d7f8d1-4ee6-48d2-b27e-7670e25bb8aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 434,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallsessionstorage\ncy.get('.ls-btn').click();\n// getAllSessionStorage() yields a map of origins to sessionStorage values\ncy.getAllSessionStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if sessionStorage is set on them\n    'https://example.cypress.io': {\n      'prop4': 'cyan',\n      'prop5': 'yellow',\n      'prop6': 'black'\n    }\n  });\n});",
              "err": {},
              "uuid": "d074124e-bb8b-4a4d-93c8-7961b72c62cb",
              "parentUUID": "f4d7f8d1-4ee6-48d2-b27e-7670e25bb8aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 357,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallsessionstorage\ncy.get('.ls-btn').click();\n// clearAllSessionStorage() yields null\ncy.clearAllSessionStorage();\ncy.getAllSessionStorage().should(() => {\n  expect(sessionStorage.getItem('prop4')).to.be.null;\n  expect(sessionStorage.getItem('prop5')).to.be.null;\n  expect(sessionStorage.getItem('prop6')).to.be.null;\n});",
              "err": {},
              "uuid": "b73bd1f1-af3a-4281-8118-b0c9aa04b50e",
              "parentUUID": "f4d7f8d1-4ee6-48d2-b27e-7670e25bb8aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5ed12984-dcda-4d67-8df5-450b4f8a8fbf",
            "cbaba1d1-67e6-48e1-8978-ceccaa90f22b",
            "160c8c1c-0fd1-4d2d-8252-bfc9205ec0e2",
            "d074124e-bb8b-4a4d-93c8-7961b72c62cb",
            "b73bd1f1-af3a-4281-8118-b0c9aa04b50e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2681,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cafe017a-cb8f-4b30-b407-4c331792f678",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
          "title": "Traversal",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".children() - get child DOM elements",
              "fullTitle": "Traversal .children() - get child DOM elements",
              "timedOut": null,
              "duration": 570,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/children\ncy.get('.traversal-breadcrumb').children('.active').should('contain', 'Data');",
              "err": {},
              "uuid": "b1cf23ee-e36b-49bd-891c-927e89cdfb61",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".closest() - get closest ancestor DOM element",
              "fullTitle": "Traversal .closest() - get closest ancestor DOM element",
              "timedOut": null,
              "duration": 205,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/closest\ncy.get('.traversal-badge').closest('ul').should('have.class', 'list-group');",
              "err": {},
              "uuid": "b64432c4-e25c-4468-98ec-cab68c4ecffa",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".eq() - get a DOM element at a specific index",
              "fullTitle": "Traversal .eq() - get a DOM element at a specific index",
              "timedOut": null,
              "duration": 216,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/eq\ncy.get('.traversal-list>li').eq(1).should('contain', 'siamese');",
              "err": {},
              "uuid": "d530f4a1-b944-4d77-aa8b-5de235bfa5f2",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".filter() - get DOM elements that match the selector",
              "fullTitle": "Traversal .filter() - get DOM elements that match the selector",
              "timedOut": null,
              "duration": 246,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/filter\ncy.get('.traversal-nav>li').filter('.active').should('contain', 'About');",
              "err": {},
              "uuid": "19e800b3-94f3-4178-90d5-efec14107456",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".find() - get descendant DOM elements of the selector",
              "fullTitle": "Traversal .find() - get descendant DOM elements of the selector",
              "timedOut": null,
              "duration": 332,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/find\ncy.get('.traversal-pagination').find('li').find('a').should('have.length', 7);",
              "err": {},
              "uuid": "05f71cbc-5916-4c90-bd75-479f695158dd",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".first() - get first DOM element",
              "fullTitle": "Traversal .first() - get first DOM element",
              "timedOut": null,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/first\ncy.get('.traversal-table td').first().should('contain', '1');",
              "err": {},
              "uuid": "883802e3-2c07-4368-ad70-21e6ecba9228",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".last() - get last DOM element",
              "fullTitle": "Traversal .last() - get last DOM element",
              "timedOut": null,
              "duration": 195,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/last\ncy.get('.traversal-buttons .btn').last().should('contain', 'Submit');",
              "err": {},
              "uuid": "b7289011-329d-4abb-9d50-f499b70b8eac",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".next() - get next sibling DOM element",
              "fullTitle": "Traversal .next() - get next sibling DOM element",
              "timedOut": null,
              "duration": 211,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/next\ncy.get('.traversal-ul').contains('apples').next().should('contain', 'oranges');",
              "err": {},
              "uuid": "494676fc-16a8-4b0f-9aed-2faf4fec1c7e",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextAll() - get all next sibling DOM elements",
              "fullTitle": "Traversal .nextAll() - get all next sibling DOM elements",
              "timedOut": null,
              "duration": 201,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextall\ncy.get('.traversal-next-all').contains('oranges').nextAll().should('have.length', 3);",
              "err": {},
              "uuid": "aba89bdc-7446-4b3f-acac-ce599dbd3d67",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextUntil() - get next sibling DOM elements until next el",
              "fullTitle": "Traversal .nextUntil() - get next sibling DOM elements until next el",
              "timedOut": null,
              "duration": 225,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextuntil\ncy.get('#veggies').nextUntil('#nuts').should('have.length', 3);",
              "err": {},
              "uuid": "54e0a8f9-cf02-4bca-8d39-44cba530e8f3",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".not() - remove DOM elements from set of DOM elements",
              "fullTitle": "Traversal .not() - remove DOM elements from set of DOM elements",
              "timedOut": null,
              "duration": 217,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/not\ncy.get('.traversal-disabled .btn').not('[disabled]').should('not.contain', 'Disabled');",
              "err": {},
              "uuid": "32770a2b-4f52-4ddf-b5ac-94eec9f56170",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parent() - get parent DOM element from DOM elements",
              "fullTitle": "Traversal .parent() - get parent DOM element from DOM elements",
              "timedOut": null,
              "duration": 533,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parent\ncy.get('.traversal-mark').parent().should('contain', 'Morbi leo risus');",
              "err": {},
              "uuid": "c4d821e3-f8c4-4a21-a461-01a211761180",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parents() - get parent DOM elements from DOM elements",
              "fullTitle": "Traversal .parents() - get parent DOM elements from DOM elements",
              "timedOut": null,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parents\ncy.get('.traversal-cite').parents().should('match', 'blockquote');",
              "err": {},
              "uuid": "d1f9a98b-3815-4a1d-8513-d3f784e6a200",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parentsUntil() - get parent DOM elements from DOM elements until el",
              "fullTitle": "Traversal .parentsUntil() - get parent DOM elements from DOM elements until el",
              "timedOut": null,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parentsuntil\ncy.get('.clothes-nav').find('.active').parentsUntil('.clothes-nav').should('have.length', 2);",
              "err": {},
              "uuid": "12a84f3c-69ab-472e-9ef7-aa5cb873c628",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prev() - get previous sibling DOM element",
              "fullTitle": "Traversal .prev() - get previous sibling DOM element",
              "timedOut": null,
              "duration": 198,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prev\ncy.get('.birds').find('.active').prev().should('contain', 'Lorikeets');",
              "err": {},
              "uuid": "8175ff19-94c2-4bcb-ad5b-cece1ebf1da3",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevAll() - get all previous sibling DOM elements",
              "fullTitle": "Traversal .prevAll() - get all previous sibling DOM elements",
              "timedOut": null,
              "duration": 202,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevall\ncy.get('.fruits-list').find('.third').prevAll().should('have.length', 2);",
              "err": {},
              "uuid": "b0af9d79-e035-4a9c-bd9f-19843ab25d87",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevUntil() - get all previous sibling DOM elements until el",
              "fullTitle": "Traversal .prevUntil() - get all previous sibling DOM elements until el",
              "timedOut": null,
              "duration": 254,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevuntil\ncy.get('.foods-list').find('#nuts').prevUntil('#veggies').should('have.length', 3);",
              "err": {},
              "uuid": "539968f1-fe21-4f8d-90b7-27958b8fd65a",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".siblings() - get all sibling DOM elements",
              "fullTitle": "Traversal .siblings() - get all sibling DOM elements",
              "timedOut": null,
              "duration": 635,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/siblings\ncy.get('.traversal-pills .active').siblings().should('have.length', 2);",
              "err": {},
              "uuid": "fb795f53-f485-4f3f-8528-43c8f1938643",
              "parentUUID": "cddf971e-dc2b-41a4-a107-dadd0fc62c48",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b1cf23ee-e36b-49bd-891c-927e89cdfb61",
            "b64432c4-e25c-4468-98ec-cab68c4ecffa",
            "d530f4a1-b944-4d77-aa8b-5de235bfa5f2",
            "19e800b3-94f3-4178-90d5-efec14107456",
            "05f71cbc-5916-4c90-bd75-479f695158dd",
            "883802e3-2c07-4368-ad70-21e6ecba9228",
            "b7289011-329d-4abb-9d50-f499b70b8eac",
            "494676fc-16a8-4b0f-9aed-2faf4fec1c7e",
            "aba89bdc-7446-4b3f-acac-ce599dbd3d67",
            "54e0a8f9-cf02-4bca-8d39-44cba530e8f3",
            "32770a2b-4f52-4ddf-b5ac-94eec9f56170",
            "c4d821e3-f8c4-4a21-a461-01a211761180",
            "d1f9a98b-3815-4a1d-8513-d3f784e6a200",
            "12a84f3c-69ab-472e-9ef7-aa5cb873c628",
            "8175ff19-94c2-4bcb-ad5b-cece1ebf1da3",
            "b0af9d79-e035-4a9c-bd9f-19843ab25d87",
            "539968f1-fe21-4f8d-90b7-27958b8fd65a",
            "fb795f53-f485-4f3f-8528-43c8f1938643"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5051,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a1d271fb-9a25-41bd-ac8b-f5aa4dbd1173",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bc4c6697-a331-4ce7-b929-037ae43a87c9",
          "title": "Utilities",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cypress._ - call a lodash method",
              "fullTitle": "Utilities Cypress._ - call a lodash method",
              "timedOut": null,
              "duration": 990,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/_\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  let ids = Cypress._.chain(response.body).map('id').take(3).value();\n  expect(ids).to.deep.eq([1, 2, 3]);\n});",
              "err": {},
              "uuid": "8395c204-1621-4f17-9bc8-87ea268f1608",
              "parentUUID": "bc4c6697-a331-4ce7-b929-037ae43a87c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.$ - call a jQuery method",
              "fullTitle": "Utilities Cypress.$ - call a jQuery method",
              "timedOut": null,
              "duration": 350,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/$\nlet $li = Cypress.$('.utility-jquery li:first');\ncy.wrap($li).should('not.have.class', 'active');\ncy.wrap($li).click();\ncy.wrap($li).should('have.class', 'active');",
              "err": {},
              "uuid": "bc959252-2b78-476b-b602-b05d9145d989",
              "parentUUID": "bc4c6697-a331-4ce7-b929-037ae43a87c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Blob - blob utilities and base64 string conversion",
              "fullTitle": "Utilities Cypress.Blob - blob utilities and base64 string conversion",
              "timedOut": null,
              "duration": 767,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blob\ncy.get('.utility-blob').then($div => {\n  // https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n  // get the dataUrl string for the javascript-logo\n  return Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(dataUrl => {\n    // create an <img> element and set its src to the dataUrl\n    let img = Cypress.$('<img />', {\n      src: dataUrl\n    });\n    // need to explicitly return cy here since we are initially returning\n    // the Cypress.Blob.imgSrcToDataURL promise to our test\n    // append the image\n    $div.append(img);\n    cy.get('.utility-blob img').click();\n    cy.get('.utility-blob img').should('have.attr', 'src', dataUrl);\n  });\n});",
              "err": {},
              "uuid": "c815a828-bdd5-4e79-ac28-2d10482c85b4",
              "parentUUID": "bc4c6697-a331-4ce7-b929-037ae43a87c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.minimatch - test out glob patterns against strings",
              "fullTitle": "Utilities Cypress.minimatch - test out glob patterns against strings",
              "timedOut": null,
              "duration": 247,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/minimatch\nlet matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'matching wildcard').to.be.true;\nmatching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.false;\n// ** matches against all downstream path segments\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.true;\n// whereas * matches only the next path segment\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false\n});\nexpect(matching, 'comments').to.be.false;",
              "err": {},
              "uuid": "3ac9038c-642d-460c-8021-82c89c752d97",
              "parentUUID": "bc4c6697-a331-4ce7-b929-037ae43a87c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Promise - instantiate a bluebird promise",
              "fullTitle": "Utilities Cypress.Promise - instantiate a bluebird promise",
              "timedOut": null,
              "duration": 1372,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/promise\nlet waited = false;\n/**\n * @return Bluebird<string>\n */\nfunction waitOneSecond() {\n  // return a promise that resolves after 1 second\n  return new Cypress.Promise((resolve, reject) => {\n    setTimeout(() => {\n      // set waited to true\n      waited = true;\n      // resolve with 'foo' string\n      resolve('foo');\n    }, 1000);\n  });\n}\ncy.then(() => {\n  // return a promise to cy.then() that\n  // is awaited until it resolves\n  return waitOneSecond().then(str => {\n    expect(str).to.eq('foo');\n    expect(waited).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "58074ba2-b114-4d0e-8ff1-11297782685c",
              "parentUUID": "bc4c6697-a331-4ce7-b929-037ae43a87c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8395c204-1621-4f17-9bc8-87ea268f1608",
            "bc959252-2b78-476b-b602-b05d9145d989",
            "c815a828-bdd5-4e79-ac28-2d10482c85b4",
            "3ac9038c-642d-460c-8021-82c89c752d97",
            "58074ba2-b114-4d0e-8ff1-11297782685c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3726,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f298e9fa-c41b-4e7f-8a36-057d466dd796",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "858ed4db-6290-4dfb-a411-5a7fef760a73",
          "title": "Viewport",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.viewport() - set the viewport size and dimension",
              "fullTitle": "Viewport cy.viewport() - set the viewport size and dimension",
              "timedOut": null,
              "duration": 3787,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/viewport\ncy.get('#navbar').should('be.visible');\ncy.viewport(320, 480);\n// the navbar should have collapse since our screen is smaller\ncy.get('#navbar').should('not.be.visible');\ncy.get('.navbar-toggle').should('be.visible').click();\ncy.get('.nav').find('a').should('be.visible');\n// lets see what our app looks like on a super large screen\ncy.viewport(2999, 2999);\n// cy.viewport() accepts a set of preset sizes\n// to easily set the screen to a device's width and height\n// We added a cy.wait() between each viewport change so you can see\n// the change otherwise it is a little too fast to see :)\ncy.viewport('macbook-15');\ncy.wait(200);\ncy.viewport('macbook-13');\ncy.wait(200);\ncy.viewport('macbook-11');\ncy.wait(200);\ncy.viewport('ipad-2');\ncy.wait(200);\ncy.viewport('ipad-mini');\ncy.wait(200);\ncy.viewport('iphone-6+');\ncy.wait(200);\ncy.viewport('iphone-6');\ncy.wait(200);\ncy.viewport('iphone-5');\ncy.wait(200);\ncy.viewport('iphone-4');\ncy.wait(200);\ncy.viewport('iphone-3');\ncy.wait(200);\n// cy.viewport() accepts an orientation for all presets\n// the default orientation is 'portrait'\ncy.viewport('ipad-2', 'portrait');\ncy.wait(200);\ncy.viewport('iphone-4', 'landscape');\ncy.wait(200);\n// The viewport will be reset back to the default dimensions\n// in between tests (the  default can be set in cypress.config.{js|ts})",
              "err": {},
              "uuid": "5d58fb7b-9bb7-42ae-8905-4654a3ad3f4e",
              "parentUUID": "858ed4db-6290-4dfb-a411-5a7fef760a73",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5d58fb7b-9bb7-42ae-8905-4654a3ad3f4e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3787,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cca1931b-6d64-4e28-b060-7fd87e1ec1ec",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "32352321-6d37-4fe8-b32e-f8e0b6ad284f",
          "title": "Waiting",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.wait() - wait for a specific amount of time",
              "fullTitle": "Waiting cy.wait() - wait for a specific amount of time",
              "timedOut": null,
              "duration": 6053,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.wait-input1').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input2').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input3').type('Wait 1000ms after typing');\ncy.wait(1000);",
              "err": {},
              "uuid": "80c3d97a-992e-4306-bcc9-6c2bd3c425aa",
              "parentUUID": "32352321-6d37-4fe8-b32e-f8e0b6ad284f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wait() - wait for a specific route",
              "fullTitle": "Waiting cy.wait() - wait for a specific route",
              "timedOut": null,
              "duration": 1796,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// wait for GET comments/1\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);",
              "err": {},
              "uuid": "3d725123-3d97-44d3-b2ee-16b310d479d3",
              "parentUUID": "32352321-6d37-4fe8-b32e-f8e0b6ad284f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "80c3d97a-992e-4306-bcc9-6c2bd3c425aa",
            "3d725123-3d97-44d3-b2ee-16b310d479d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7849,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ea6abd42-b469-41c9-af7c-97d3a2358039",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "90683b2c-9ead-4f54-89aa-bdd07a2cf438",
          "title": "Window",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.window() - get the global window object",
              "fullTitle": "Window cy.window() - get the global window object",
              "timedOut": null,
              "duration": 660,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/window\ncy.window().should('have.property', 'top');",
              "err": {},
              "uuid": "430d8af5-c703-4908-be40-08865b3aa876",
              "parentUUID": "90683b2c-9ead-4f54-89aa-bdd07a2cf438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.document() - get the document object",
              "fullTitle": "Window cy.document() - get the document object",
              "timedOut": null,
              "duration": 288,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/document\ncy.document().should('have.property', 'charset').and('eq', 'UTF-8');",
              "err": {},
              "uuid": "f76ac693-94b2-40fd-8834-8b8b2bc2403f",
              "parentUUID": "90683b2c-9ead-4f54-89aa-bdd07a2cf438",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.title() - get the title",
              "fullTitle": "Window cy.title() - get the title",
              "timedOut": null,
              "duration": 188,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/title\ncy.title().should('include', 'Kitchen Sink');",
              "err": {},
              "uuid": "ab17930e-fd0c-4f6c-b6ca-a8b11c153774",
              "parentUUID": "90683b2c-9ead-4f54-89aa-bdd07a2cf438",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "430d8af5-c703-4908-be40-08865b3aa876",
            "f76ac693-94b2-40fd-8834-8b8b2bc2403f",
            "ab17930e-fd0c-4f6c-b6ca-a8b11c153774"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1136,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d1a5b0f0-1e9d-48dd-b53d-6eb7c57caa6b",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.login.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0453c5ef-26be-427a-bf8d-248a20544c4c",
          "title": "API login test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully log in with valid credentials",
              "fullTitle": "API login test should successfully log in with valid credentials",
              "timedOut": null,
              "duration": 5084,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/login`,\n  body: {\n    username: Cypress.env(\"username\"),\n    password: Cypress.env(\"password\")\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "b921f82c-037d-4bae-95e1-aeb604a6d4a9",
              "parentUUID": "0453c5ef-26be-427a-bf8d-248a20544c4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to log in with invalid credentials",
              "fullTitle": "API login test should fail to log in with invalid credentials",
              "timedOut": null,
              "duration": 2740,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/login`,\n  body: {\n    username: \"invalid@test.fr\",\n    password: \"wrongpassword\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "16a1ae0a-8c12-449e-b8e4-71451d224092",
              "parentUUID": "0453c5ef-26be-427a-bf8d-248a20544c4c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for missing credentials",
              "fullTitle": "API login test should return an error for missing credentials",
              "timedOut": null,
              "duration": 560,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/login`,\n  body: {},\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {},
              "uuid": "eeb1f796-5f35-4e1e-b0c9-eda465771eff",
              "parentUUID": "0453c5ef-26be-427a-bf8d-248a20544c4c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b921f82c-037d-4bae-95e1-aeb604a6d4a9",
            "16a1ae0a-8c12-449e-b8e4-71451d224092",
            "eeb1f796-5f35-4e1e-b0c9-eda465771eff"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8384,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "06f9105c-388f-4648-b796-da355ac23245",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.orders.add.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.orders.add.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3cde93ac-8aad-4630-828c-25301b1f8c65",
          "title": "API add product to cart test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add an available product to the cart",
              "fullTitle": "API add product to cart test should add an available product to the cart",
              "timedOut": null,
              "duration": 9656,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authToken = localStorage.getItem(\"user\");\ncy.request({\n  method: \"PUT\",\n  url: `${UrlApi}/orders/add`,\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  },\n  body: {\n    product: 5,\n    // ID of an available product\n    quantity: 1\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // (OK)\n  cy.visit(\"/cart\");\n  cy.wait(2000);\n  cy.get('[data-cy=\"cart-line\"]').should(\"have.length.at.least\", 1); // Verify if there is at least 1 product in the cart\n});",
              "err": {},
              "uuid": "f48eea10-3f60-4de3-b7f1-64dd57ae8cb3",
              "parentUUID": "3cde93ac-8aad-4630-828c-25301b1f8c65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when adding an out-of-stock product to the cart",
              "fullTitle": "API add product to cart test should return an error when adding an out-of-stock product to the cart",
              "timedOut": null,
              "duration": 1953,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const authToken = localStorage.getItem(\"user\");\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products/3`,\n  // product ID\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  const productStock = response.body.availableStock;\n  expect(productStock).to.be.a(\"number\").and.to.be.greaterThan(0);\n  const requestedQuantity = productStock + 1;\n  cy.request({\n    method: \"PUT\",\n    url: `${UrlApi}/orders/add`,\n    headers: {\n      Authorization: `Bearer ${authToken}`\n    },\n    body: {\n      product: 3,\n      // product ID\n      quantity: requestedQuantity\n    },\n    failOnStatusCode: false\n  }).then(response => {\n    expect(response.status).to.eq(400); // Bad request\n    expect(response.body).to.have.property(\"error\");\n    cy.visit(\"/cart\");\n    cy.get('[data-cy=\"cart-line\"]').should(\"have.length\", 0); // 0 products in the cart\n  });\n});",
              "err": {
                "message": "AssertionError: expected -10 to be above +0",
                "estack": "AssertionError: expected -10 to be above +0\n    at Context.eval (webpack:///./cypress/support/commands.js:22:4)",
                "diff": null
              },
              "uuid": "349f4de1-da31-4780-8d1a-b00caba16afa",
              "parentUUID": "3cde93ac-8aad-4630-828c-25301b1f8c65",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when not authenticated",
              "fullTitle": "API add product to cart test should return an error when not authenticated",
              "timedOut": null,
              "duration": 2007,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.logout();\ncy.request({\n  method: \"PUT\",\n  url: `${UrlApi}/orders/add`,\n  body: {\n    product: 1,\n    quantity: 2\n  },\n  failOnStatusCode: false,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(401); // Unauthorized\n});",
              "err": {},
              "uuid": "ee7f2488-cc95-40ec-8c89-aaf0dac5107f",
              "parentUUID": "3cde93ac-8aad-4630-828c-25301b1f8c65",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f48eea10-3f60-4de3-b7f1-64dd57ae8cb3",
            "ee7f2488-cc95-40ec-8c89-aaf0dac5107f"
          ],
          "failures": [
            "349f4de1-da31-4780-8d1a-b00caba16afa"
          ],
          "pending": [],
          "skipped": [],
          "duration": 13616,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a65d6bae-efa3-4db7-8cf1-327da6c2bc86",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.orders.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.orders.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "216d8336-190a-40b3-b0ad-08222c02c061",
          "title": "API orders test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display the list of products from the cart",
              "fullTitle": "API orders test should display the list of products from the cart",
              "timedOut": null,
              "duration": 2050,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authToken = localStorage.getItem(\"user\");\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/orders`,\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"object\");\n  expect(response.body).to.have.property(\"orderLines\");\n  expect(response.body.orderLines).to.be.an(\"array\");\n});",
              "err": {},
              "uuid": "c96b6e6b-8019-4f9a-b27b-8714369ba913",
              "parentUUID": "216d8336-190a-40b3-b0ad-08222c02c061",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not display the list of products from the cart if not authenticated",
              "fullTitle": "API orders test should not display the list of products from the cart if not authenticated",
              "timedOut": null,
              "duration": 1260,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.logout();\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/orders`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401); //  401 (Unauthorized)\n});",
              "err": {},
              "uuid": "8da2d84c-3cc9-4acf-bec3-49699a3b891c",
              "parentUUID": "216d8336-190a-40b3-b0ad-08222c02c061",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a forbidden error when not authorized to view the products from the cart",
              "fullTitle": "API orders test should return a forbidden error when not authorized to view the products from the cart",
              "timedOut": null,
              "duration": 1112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authToken = \"invalid_token\";\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/orders`,\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401); // 401 (Unauthorized) vs 403 (Forbidden)\n});",
              "err": {},
              "uuid": "a5cf9637-af91-4f23-ab34-479970e1a475",
              "parentUUID": "216d8336-190a-40b3-b0ad-08222c02c061",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c96b6e6b-8019-4f9a-b27b-8714369ba913",
            "8da2d84c-3cc9-4acf-bec3-49699a3b891c",
            "a5cf9637-af91-4f23-ab34-479970e1a475"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4422,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d198667c-0dc9-4468-89e5-284bafd7c643",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.products.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.products.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1ab29ece-cdc1-4ec3-9105-4403cbf21f71",
          "title": "API get products test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve the list of products",
              "fullTitle": "API get products test should retrieve the list of products",
              "timedOut": null,
              "duration": 1224,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products`,\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"user\")}`,\n    \"Content-Type\": \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  response.body.forEach(product => {\n    expect(product).to.have.property(\"id\");\n    expect(product).to.have.property(\"name\").that.is.a(\"string\");\n    expect(product).to.have.property(\"availableStock\").that.is.a(\"number\");\n    expect(product).to.have.property(\"skin\").that.is.a(\"string\");\n    expect(product).to.have.property(\"aromas\").that.is.a(\"string\");\n    expect(product).to.have.property(\"ingredients\").that.is.a(\"string\");\n    expect(product).to.have.property(\"description\").that.is.a(\"string\");\n    expect(product).to.have.property(\"price\").that.is.a(\"number\");\n    expect(product).to.have.property(\"picture\").that.is.a(\"string\");\n    expect(product).to.have.property(\"varieties\").that.is.a(\"number\");\n  });\n});",
              "err": {},
              "uuid": "a1685487-83ae-4623-8650-29665ae7b99e",
              "parentUUID": "1ab29ece-cdc1-4ec3-9105-4403cbf21f71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve product details by ID",
              "fullTitle": "API get products test should retrieve product details by ID",
              "timedOut": null,
              "duration": 1212,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productId = 3;\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products/${productId}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"object\");\n  expect(response.body).to.have.property(\"id\").that.is.a(\"number\");\n  expect(response.body).to.have.property(\"name\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"availableStock\").that.is.a(\"number\");\n  expect(response.body).to.have.property(\"skin\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"aromas\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"ingredients\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"description\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"price\").that.is.a(\"number\");\n  expect(response.body).to.have.property(\"picture\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"varieties\").that.is.a(\"number\");\n});",
              "err": {},
              "uuid": "62103262-84a1-46f9-9471-050c3054b279",
              "parentUUID": "1ab29ece-cdc1-4ec3-9105-4403cbf21f71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent product ID",
              "fullTitle": "API get products test should return 404 for non-existent product ID",
              "timedOut": null,
              "duration": 1319,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentId = 9999;\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products/${nonExistentId}`,\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"user\")}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "8314beca-d608-443a-97fe-a6892f48730a",
              "parentUUID": "1ab29ece-cdc1-4ec3-9105-4403cbf21f71",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a1685487-83ae-4623-8650-29665ae7b99e",
            "62103262-84a1-46f9-9471-050c3054b279",
            "8314beca-d608-443a-97fe-a6892f48730a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3755,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "4d008ebd-4ead-4bf8-94ca-c65cdde7baff",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.reviews.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.reviews.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "be11dead-637b-44a3-92c9-32be39f890c6",
          "title": "API reviews test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get existing reviews",
              "fullTitle": "API reviews test should get existing reviews",
              "timedOut": null,
              "duration": 2378,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: `${UrlApi}/reviews`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n});",
              "err": {},
              "uuid": "dde6d0e0-db10-4c1d-858b-9909d5ed4f66",
              "parentUUID": "be11dead-637b-44a3-92c9-32be39f890c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new review",
              "fullTitle": "API reviews test should add a new review",
              "timedOut": null,
              "duration": 1773,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authToken = localStorage.getItem(\"user\");\ncy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  },\n  body: {\n    title: \"Super\",\n    comment: \"Je l'aime bien, j'achèterai à nouveau !\",\n    rating: 5\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); //201 the server has successfully processed the request, the new resource has been created\n  expect(response.body).to.have.property(\"id\");\n  expect(response.body.title).to.eq(\"Super\");\n  expect(response.body.comment).to.eq(\"Je l'aime bien, j'achèterai à nouveau !\");\n  expect(response.body.rating).to.eq(5);\n});",
              "err": {},
              "uuid": "77f50bb4-1c2c-4d96-9dbe-2529d196888f",
              "parentUUID": "be11dead-637b-44a3-92c9-32be39f890c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate review rating between 1 and 5",
              "fullTitle": "API reviews test should validate review rating between 1 and 5",
              "timedOut": null,
              "duration": 1186,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"Invalid Rating\",\n    comment: \"This rating is invalid\",\n    rating: 6\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "2b67605b-de96-49fe-a86d-dbdb8f5cd835",
              "parentUUID": "be11dead-637b-44a3-92c9-32be39f890c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review without rating",
              "fullTitle": "API reviews test should not add review without rating",
              "timedOut": null,
              "duration": 1691,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"Title without rating\",\n    comment: \"Comment without rating\"\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.eval (webpack:///./cypress/support/commands.js:22:4)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "e2c7c929-7c5b-483a-8393-d93441f41454",
              "parentUUID": "be11dead-637b-44a3-92c9-32be39f890c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review without title",
              "fullTitle": "API reviews test should not add review without title",
              "timedOut": null,
              "duration": 2433,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    comment: \"Comment without title\",\n    rating: 4\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.eval (webpack:///./cypress/support/commands.js:22:4)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "38dbb586-1013-4f7a-b015-db938e320d35",
              "parentUUID": "be11dead-637b-44a3-92c9-32be39f890c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review without comment",
              "fullTitle": "API reviews test should not add review without comment",
              "timedOut": null,
              "duration": 1881,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"Title without comment\",\n    rating: 3\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 400",
                "estack": "AssertionError: expected 401 to equal 400\n    at Context.eval (webpack:///./cypress/support/commands.js:22:4)",
                "diff": "- 401\n+ 400\n"
              },
              "uuid": "af293505-8cb0-456a-9418-68a8559142b8",
              "parentUUID": "be11dead-637b-44a3-92c9-32be39f890c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review with title longer than allowed",
              "fullTitle": "API reviews test should not add review with title longer than allowed",
              "timedOut": null,
              "duration": 1141,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const longTitle = \"a\".repeat(256); // Exemple of title longer than 100 characters\ncy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: longTitle,\n    comment: \"Valid comment\",\n    rating: 3\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "65fa21dd-d7ef-41a6-bd57-8a05b72ae71b",
              "parentUUID": "be11dead-637b-44a3-92c9-32be39f890c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review with comment longer than allowed",
              "fullTitle": "API reviews test should not add review with comment longer than allowed",
              "timedOut": null,
              "duration": 1125,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const longComment = \"a\".repeat(501); // Exemple of comment longer than 500 characters\ncy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"Valid title\",\n    comment: longComment,\n    rating: 3\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "4f90231b-a7a6-4b8b-9e5a-77d1a9dbe76c",
              "parentUUID": "be11dead-637b-44a3-92c9-32be39f890c6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow script tags in review comments (XSS Test)",
              "fullTitle": "API reviews test should not allow script tags in review comments (XSS Test)",
              "timedOut": null,
              "duration": 1605,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const xssScriptComment = \"<script>alert('XSS Attack');</script>\";\ncy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"XSS Test\",\n    comment: xssScriptComment,\n    rating: 3\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403); //403 Forbidden\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 403",
                "estack": "AssertionError: expected 401 to equal 403\n    at Context.eval (webpack:///./cypress/support/commands.js:22:4)",
                "diff": "- 401\n+ 403\n"
              },
              "uuid": "ade4b5e3-2f1e-4527-9bcf-4960d3299c13",
              "parentUUID": "be11dead-637b-44a3-92c9-32be39f890c6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "dde6d0e0-db10-4c1d-858b-9909d5ed4f66",
            "77f50bb4-1c2c-4d96-9dbe-2529d196888f",
            "2b67605b-de96-49fe-a86d-dbdb8f5cd835",
            "65fa21dd-d7ef-41a6-bd57-8a05b72ae71b",
            "4f90231b-a7a6-4b8b-9e5a-77d1a9dbe76c"
          ],
          "failures": [
            "e2c7c929-7c5b-483a-8393-d93441f41454",
            "38dbb586-1013-4f7a-b015-db938e320d35",
            "af293505-8cb0-456a-9418-68a8559142b8",
            "ade4b5e3-2f1e-4527-9bcf-4960d3299c13"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15213,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "f008c3c4-67f4-4639-b239-4c30b04ce03c",
      "title": "",
      "fullFile": "cypress\\e2e\\4-smoke-tests\\smoketests.cy.js",
      "file": "cypress\\e2e\\4-smoke-tests\\smoketests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c39da1b3-6868-408c-857e-2a1762f07d6a",
          "title": "Smoke Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify the presence of login fields and buttons",
              "fullTitle": "Smoke Tests should verify the presence of login fields and buttons",
              "timedOut": null,
              "duration": 3042,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/login\");\ncy.url().should(\"include\", \"/login\");\ncy.contains(\"Email\");\ncy.contains(\"Mot de passe\");\ncy.get('[data-cy=\"login-submit\"]').should(\"exist\");",
              "err": {},
              "uuid": "c136ab6e-1693-440d-ad27-cbee3ba1ce44",
              "parentUUID": "c39da1b3-6868-408c-857e-2a1762f07d6a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "33c592be-a887-41b1-ab02-283222552dba",
              "title": "when authenticated",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify the presence of add to cart buttons when logged in",
                  "fullTitle": "Smoke Tests when authenticated should verify the presence of add to cart buttons when logged in",
                  "timedOut": null,
                  "duration": 13160,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/products\");\ncy.url().should(\"include\", \"/products\");\n// Verify if product list is loaded\ncy.get(\".list-products .mini-product\").should(\"have.length.greaterThan\", 0);\ncy.get(\".list-products .mini-product\").each(($el, index, $list) => {\n  // cy.wrap($el).contains(\"Ajouter au panier\").should(\"be.visible\");\n  // cy.wrap($el).find('[data-cy=\"product-link\"]').should(\"exist\");\n  cy.wrap($el);\n  // .find('.add-to-cart [data-cy=\"product-link\"]')\n  cy.get('.add-to-cart button[data-cy=\"product-link\"]').first().click();\n  cy.url().should(\"include\", \"/products/\");\n  cy.contains(\"Ajouter au panier\").should(\"be.visible\");\n  // Navigate back to products list to check the next product\n  if (index < $list.length - 1) {\n    cy.go(\"back\");\n    cy.wait(1000); // Wait a moment to ensure the page has navigated back\n  }\n});",
                  "err": {},
                  "uuid": "e44b7866-9939-4bb6-a7c9-609173b522a5",
                  "parentUUID": "33c592be-a887-41b1-ab02-283222552dba",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify the presence of product availability field",
                  "fullTitle": "Smoke Tests when authenticated should verify the presence of product availability field",
                  "timedOut": null,
                  "duration": 11323,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/products\");\ncy.url().should(\"include\", \"/products\");\ncy.get(\".list-products .mini-product\").each(($el, index, $list) => {\n  cy.wrap($el);\n  cy.get('.add-to-cart button[data-cy=\"product-link\"]').first().click();\n  cy.url().should(\"include\", \"/products/\");\n  cy.get(\".stock\").should(\"exist\");\n  // Navigate back to products list to check the next product\n  if (index < $list.length - 1) {\n    cy.go(\"back\");\n    cy.wait(1000); // Wait a moment to ensure the page has navigated back\n  }\n});",
                  "err": {},
                  "uuid": "eb3de11a-5314-4657-a820-66d444aa82aa",
                  "parentUUID": "33c592be-a887-41b1-ab02-283222552dba",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e44b7866-9939-4bb6-a7c9-609173b522a5",
                "eb3de11a-5314-4657-a820-66d444aa82aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 24483,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "c136ab6e-1693-440d-ad27-cbee3ba1ce44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3042,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3379a5a6-43ba-45d7-9004-e24169dce697",
      "title": "",
      "fullFile": "cypress\\e2e\\5-functional-tests\\connexion.cy.js",
      "file": "cypress\\e2e\\5-functional-tests\\connexion.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5851d071-c07e-4964-9250-33a73b09b768",
          "title": "Connexion Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log in successfully with valid credentials",
              "fullTitle": "Connexion Tests should log in successfully with valid credentials",
              "timedOut": null,
              "duration": 15544,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-cy=\"login-input-username\"]').type(Cypress.env(\"username\"), {\n  force: true\n});\ncy.get('[data-cy=\"login-input-password\"]').type(Cypress.env(\"password\"), {\n  force: true\n});\ncy.get('[data-cy=\"login-submit\"]').click();\ncy.visit(\"/\");\ncy.url().should(\"include\", \"/\");\n// cy.get(\"nav\").contains(\"Mon panier\").should(\"be.visible\");\ncy.get('[data-cy=\"nav-link-cart\"]').should(\"be.visible\");",
              "err": {},
              "uuid": "c35b044d-fa5e-4a7e-9701-99de838a01ca",
              "parentUUID": "5851d071-c07e-4964-9250-33a73b09b768",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display an error with invalid credentials",
              "fullTitle": "Connexion Tests should display an error with invalid credentials",
              "timedOut": null,
              "duration": 7534,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-cy=\"login-input-username\"]').type(\"invalid@test.fr\", {\n  force: true\n});\ncy.get('[data-cy=\"login-input-password\"]').type(\"wrongpassword\", {\n  force: true\n});\ncy.get('[data-cy=\"login-submit\"]').click();\ncy.get('[data-cy=\"login-errors\"]').should(\"be.visible\");",
              "err": {},
              "uuid": "d647a9ad-7012-403d-99bf-dc585282ddd8",
              "parentUUID": "5851d071-c07e-4964-9250-33a73b09b768",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c35b044d-fa5e-4a7e-9701-99de838a01ca",
            "d647a9ad-7012-403d-99bf-dc585282ddd8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23078,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d84e0311-d70f-487b-a9bb-5ae982fab873",
      "title": "",
      "fullFile": "cypress\\e2e\\5-functional-tests\\panier.cy.js",
      "file": "cypress\\e2e\\5-functional-tests\\panier.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "799c4c42-8efc-4801-846a-f0274c85de00",
          "title": "Cart Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a product to the cart",
              "fullTitle": "Cart Tests should add a product to the cart",
              "timedOut": null,
              "duration": 7620,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/products\");\ncy.get('.add-to-cart [data-cy=\"product-link\"]').first().click();\ncy.url().should(\"include\", \"/products/\");\ncy.get('[data-cy=\"detail-product-add\"]').should(\"be.visible\").click(); //Ajouter au panier\ncy.visit(\"/cart\");\ncy.get('[data-cy=\"cart-line\"]').should(\"have.length.greaterThan\", 0);",
              "err": {},
              "uuid": "fb7644b1-1219-46b4-a855-9005f78195b4",
              "parentUUID": "799c4c42-8efc-4801-846a-f0274c85de00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify if the stock is reduced after adding to cart",
              "fullTitle": "Cart Tests should verify if the stock is reduced after adding to cart",
              "timedOut": null,
              "duration": 3186,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/products\");\ncy.get('.add-to-cart [data-cy=\"product-link\"]').first().click();\ncy.url().should(\"include\", \"/products/\");\ncy.get('[data-cy=\"detail-product-stock\"]').invoke(\"text\").then(availableStock => {\n  const initialStock = Number(availableStock.trim());\n  expect(initialStock).to.be.greaterThan(1);\n  cy.get('[data-cy=\"detail-product-add\"]').click();\n  // cy.visit(\"/products/{productId}\");\n  cy.url().should(\"include\", \"/products/\");\n  cy.get('[data-cy=\"product-stock\"]').invoke(\"text\").then(updatedStockNumber => {\n    const updatedStock = Number(updatedStockNumber.trim());\n    expect(updatedStock).to.eq(initialStock - 1); // Verify if stock was reduced\n  });\n});",
              "err": {
                "message": "AssertionError: expected NaN to be above 1",
                "estack": "AssertionError: expected NaN to be above 1\n    at Context.eval (webpack:///./cypress/e2e/5-functional-tests/panier.cy.js:23:7)",
                "diff": null
              },
              "uuid": "2a91ed9e-2dbe-4e15-a147-188f6984667d",
              "parentUUID": "799c4c42-8efc-4801-846a-f0274c85de00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle invalid quantity inputs",
              "fullTitle": "Cart Tests should handle invalid quantity inputs",
              "timedOut": null,
              "duration": 14837,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/cart\");\ncy.get('[data-cy=\"cart-line\"]').first().find('[data-cy=\"cart-line-quantity\"]').clear().type(\"-5{enter}\");\n// cy.get('[data-cy=\"cart-line\"]')\n//   .first()\n//   .find('[data-cy=\"cart-line-quantity\"]')\n//   .should(\"have.value\", \"1\"); // Verify if the negative value was reset to 1\ncy.contains(\"This value should be 0 or more.\").should(\"be.visible\");\ncy.get('[data-cy=\"cart-line\"]').first().find('[data-cy=\"cart-line-quantity\"]').clear().type(\"1000{enter}\");\ncy.contains(\"This value is not valid.\").should(\"be.visible\"); // Check if an error message is displayed",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find content: 'This value should be 0 or more.' but never did.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find content: 'This value should be 0 or more.' but never did.\n    at Context.eval (webpack:///./cypress/e2e/5-functional-tests/panier.cy.js:49:51)",
                "diff": null
              },
              "uuid": "6d6e488d-80e4-41f8-b877-ac3a67fb9118",
              "parentUUID": "799c4c42-8efc-4801-846a-f0274c85de00",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a product from the cart",
              "fullTitle": "Cart Tests should remove a product from the cart",
              "timedOut": null,
              "duration": 5551,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/cart\");\ncy.get('[data-cy=\"cart-line\"]').should(\"have.length.greaterThan\", 0);\ncy.get('[data-cy=\"cart-line-delete\"]').should(\"be.visible\").each($el => {\n  cy.wrap($el).click();\n});\ncy.get('[data-cy=\"cart-line\"]').should(\"have.length\", 0);",
              "err": {},
              "uuid": "0e48998d-7cc5-4729-b22c-a2b917573fc2",
              "parentUUID": "799c4c42-8efc-4801-846a-f0274c85de00",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fb7644b1-1219-46b4-a855-9005f78195b4",
            "0e48998d-7cc5-4729-b22c-a2b917573fc2"
          ],
          "failures": [
            "2a91ed9e-2dbe-4e15-a147-188f6984667d",
            "6d6e488d-80e4-41f8-b877-ac3a67fb9118"
          ],
          "pending": [],
          "skipped": [],
          "duration": 31194,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ad166e06-0968-4954-90ad-e2d693fb4723",
      "title": "",
      "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f0554582-0804-45ef-893c-59a9a682296e",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 1828,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2);\n// We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "617f4a68-2bf2-4574-b072-6e127f3c8f0b",
              "parentUUID": "f0554582-0804-45ef-893c-59a9a682296e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 862,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat';\n// Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n// Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "3c6afe64-5cfe-44e7-aed4-3075828cb3f4",
              "parentUUID": "f0554582-0804-45ef-893c-59a9a682296e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 465,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n// Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "f04f57b1-ccc5-44ec-8b0d-657295de7b6c",
              "parentUUID": "f0554582-0804-45ef-893c-59a9a682296e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "2900efd6-9c5d-424d-b25d-6d9af9bff896",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 826,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click();\n// After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n// For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "d010619a-6cef-447a-91f8-781f489cb37e",
                  "parentUUID": "2900efd6-9c5d-424d-b25d-6d9af9bff896",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 536,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "212264e4-d86b-405b-8c26-dc896baa7bef",
                  "parentUUID": "2900efd6-9c5d-424d-b25d-6d9af9bff896",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 523,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click();\n// Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n// Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "15d402c0-f94f-4c24-8754-47ca07b345a9",
                  "parentUUID": "2900efd6-9c5d-424d-b25d-6d9af9bff896",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d010619a-6cef-447a-91f8-781f489cb37e",
                "212264e4-d86b-405b-8c26-dc896baa7bef",
                "15d402c0-f94f-4c24-8754-47ca07b345a9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1885,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "617f4a68-2bf2-4574-b072-6e127f3c8f0b",
            "3c6afe64-5cfe-44e7-aed4-3075828cb3f4",
            "f04f57b1-ccc5-44ec-8b0d-657295de7b6c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3155,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5bb4fee2-a00b-4a58-b545-a455e127e31a",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\actions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
          "title": "Actions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".type() - type into a DOM element",
              "fullTitle": "Actions .type() - type into a DOM element",
              "timedOut": null,
              "duration": 5606,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/type\ncy.get('.action-email').type('fake@email.com');\ncy.get('.action-email').should('have.value', 'fake@email.com');\n// .type() with special character sequences\ncy.get('.action-email').type('{leftarrow}{rightarrow}{uparrow}{downarrow}');\ncy.get('.action-email').type('{del}{selectall}{backspace}');\n// .type() with key modifiers\ncy.get('.action-email').type('{alt}{option}'); //these are equivalent\ncy.get('.action-email').type('{ctrl}{control}'); //these are equivalent\ncy.get('.action-email').type('{meta}{command}{cmd}'); //these are equivalent\ncy.get('.action-email').type('{shift}');\n// Delay each keypress by 0.1 sec\ncy.get('.action-email').type('slow.typing@email.com', {\n  delay: 100\n});\ncy.get('.action-email').should('have.value', 'slow.typing@email.com');\ncy.get('.action-disabled')\n// Ignore error checking prior to type\n// like whether the input is visible or disabled\n.type('disabled error checking', {\n  force: true\n});\ncy.get('.action-disabled').should('have.value', 'disabled error checking');",
              "err": {},
              "uuid": "906626f3-0281-466d-bdf7-6ac3b6dc42fe",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".focus() - focus on a DOM element",
              "fullTitle": "Actions .focus() - focus on a DOM element",
              "timedOut": null,
              "duration": 735,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focus\ncy.get('.action-focus').focus();\ncy.get('.action-focus').should('have.class', 'focus').prev().should('have.attr', 'style', 'color: orange;');",
              "err": {},
              "uuid": "6af3148d-e25e-43ce-9657-0a14709979f8",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".blur() - blur off a DOM element",
              "fullTitle": "Actions .blur() - blur off a DOM element",
              "timedOut": null,
              "duration": 640,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blur\ncy.get('.action-blur').type('About to blur');\ncy.get('.action-blur').blur();\ncy.get('.action-blur').should('have.class', 'error').prev().should('have.attr', 'style', 'color: red;');",
              "err": {},
              "uuid": "733d9470-9232-4d2d-a6cf-de7192498534",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".clear() - clears an input or textarea element",
              "fullTitle": "Actions .clear() - clears an input or textarea element",
              "timedOut": null,
              "duration": 1203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clear\ncy.get('.action-clear').type('Clear this text');\ncy.get('.action-clear').should('have.value', 'Clear this text');\ncy.get('.action-clear').clear();\ncy.get('.action-clear').should('have.value', '');",
              "err": {},
              "uuid": "fa7f0c8e-c131-420e-b9f7-fa13a9192be5",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".submit() - submit a form",
              "fullTitle": "Actions .submit() - submit a form",
              "timedOut": null,
              "duration": 648,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/submit\ncy.get('.action-form').find('[type=\"text\"]').type('HALFOFF');\ncy.get('.action-form').submit();\ncy.get('.action-form').next().should('contain', 'Your form has been submitted!');",
              "err": {},
              "uuid": "a09e4844-a115-4e70-b85f-b25c8a4eff86",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".click() - click on a DOM element",
              "fullTitle": "Actions .click() - click on a DOM element",
              "timedOut": null,
              "duration": 2677,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/click\ncy.get('.action-btn').click();\n// You can click on 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// clicking in the center of the element is the default\ncy.get('#action-canvas').click();\ncy.get('#action-canvas').click('topLeft');\ncy.get('#action-canvas').click('top');\ncy.get('#action-canvas').click('topRight');\ncy.get('#action-canvas').click('left');\ncy.get('#action-canvas').click('right');\ncy.get('#action-canvas').click('bottomLeft');\ncy.get('#action-canvas').click('bottom');\ncy.get('#action-canvas').click('bottomRight');\n// .click() accepts an x and y coordinate\n// that controls where the click occurs :)\ncy.get('#action-canvas');\ncy.get('#action-canvas').click(80, 75); // click 80px on x coord and 75px on y coord\ncy.get('#action-canvas').click(170, 75);\ncy.get('#action-canvas').click(80, 165);\ncy.get('#action-canvas').click(100, 185);\ncy.get('#action-canvas').click(125, 190);\ncy.get('#action-canvas').click(150, 185);\ncy.get('#action-canvas').click(170, 165);\n// click multiple elements by passing multiple: true\ncy.get('.action-labels>.label').click({\n  multiple: true\n});\n// Ignore error checking prior to clicking\ncy.get('.action-opacity>.btn').click({\n  force: true\n});",
              "err": {},
              "uuid": "59688d46-c05a-452e-8010-63ecd685a237",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".dblclick() - double click on a DOM element",
              "fullTitle": "Actions .dblclick() - double click on a DOM element",
              "timedOut": null,
              "duration": 435,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/dblclick\n// Our app has a listener on 'dblclick' event in our 'scripts.js'\n// that hides the div and shows an input on double click\ncy.get('.action-div').dblclick();\ncy.get('.action-div').should('not.be.visible');\ncy.get('.action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "34f05a59-bb6a-4eab-8cb6-6cf5e4704879",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".rightclick() - right click on a DOM element",
              "fullTitle": "Actions .rightclick() - right click on a DOM element",
              "timedOut": null,
              "duration": 711,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/rightclick\n// Our app has a listener on 'contextmenu' event in our 'scripts.js'\n// that hides the div and shows an input on right click\ncy.get('.rightclick-action-div').rightclick();\ncy.get('.rightclick-action-div').should('not.be.visible');\ncy.get('.rightclick-action-input-hidden').should('be.visible');",
              "err": {},
              "uuid": "f05d9ebc-3521-48aa-998d-2d492a17f367",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".check() - check a checkbox or radio element",
              "fullTitle": "Actions .check() - check a checkbox or radio element",
              "timedOut": null,
              "duration": 2036,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/check\n// By default, .check() will check all\n// matching checkbox or radio elements in succession, one after another\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').check();\ncy.get('.action-checkboxes [type=\"checkbox\"]').not('[disabled]').should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').check();\ncy.get('.action-radios [type=\"radio\"]').not('[disabled]').should('be.checked');\n// .check() accepts a value argument\ncy.get('.action-radios [type=\"radio\"]').check('radio1');\ncy.get('.action-radios [type=\"radio\"]').should('be.checked');\n// .check() accepts an array of values\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').check(['checkbox1', 'checkbox2']);\ncy.get('.action-multiple-checkboxes [type=\"checkbox\"]').should('be.checked');\n// Ignore error checking prior to checking\ncy.get('.action-checkboxes [disabled]').check({\n  force: true\n});\ncy.get('.action-checkboxes [disabled]').should('be.checked');\ncy.get('.action-radios [type=\"radio\"]').check('radio3', {\n  force: true\n});\ncy.get('.action-radios [type=\"radio\"]').should('be.checked');",
              "err": {},
              "uuid": "72ca29e0-f406-4ad5-af1a-4d6ece31bf5c",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".uncheck() - uncheck a checkbox element",
              "fullTitle": "Actions .uncheck() - uncheck a checkbox element",
              "timedOut": null,
              "duration": 1181,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/uncheck\n// By default, .uncheck() will uncheck all matching\n// checkbox elements in succession, one after another\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').uncheck();\ncy.get('.action-check [type=\"checkbox\"]').not('[disabled]').should('not.be.checked');\n// .uncheck() accepts a value argument\ncy.get('.action-check [type=\"checkbox\"]').check('checkbox1');\ncy.get('.action-check [type=\"checkbox\"]').uncheck('checkbox1');\ncy.get('.action-check [type=\"checkbox\"][value=\"checkbox1\"]').should('not.be.checked');\n// .uncheck() accepts an array of values\ncy.get('.action-check [type=\"checkbox\"]').check(['checkbox1', 'checkbox3']);\ncy.get('.action-check [type=\"checkbox\"]').uncheck(['checkbox1', 'checkbox3']);\ncy.get('.action-check [type=\"checkbox\"][value=\"checkbox1\"]').should('not.be.checked');\ncy.get('.action-check [type=\"checkbox\"][value=\"checkbox3\"]').should('not.be.checked');\n// Ignore error checking prior to unchecking\ncy.get('.action-check [disabled]').uncheck({\n  force: true\n});\ncy.get('.action-check [disabled]').should('not.be.checked');",
              "err": {},
              "uuid": "99c708d4-832b-44f3-9db0-51f307d75712",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".select() - select an option in a <select> element",
              "fullTitle": "Actions .select() - select an option in a <select> element",
              "timedOut": null,
              "duration": 1211,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/select\n// at first, no option should be selected\ncy.get('.action-select').should('have.value', '--Select a fruit--');\n// Select option(s) with matching text content\ncy.get('.action-select').select('apples');\n// confirm the apples were selected\n// note that each value starts with \"fr-\" in our HTML\ncy.get('.action-select').should('have.value', 'fr-apples');\ncy.get('.action-select-multiple').select(['apples', 'oranges', 'bananas']);\ncy.get('.action-select-multiple')\n// when getting multiple values, invoke \"val\" method first\n.invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// Select option(s) with matching value\ncy.get('.action-select').select('fr-bananas');\ncy.get('.action-select')\n// can attach an assertion right away to the element\n.should('have.value', 'fr-bananas');\ncy.get('.action-select-multiple').select(['fr-apples', 'fr-oranges', 'fr-bananas']);\ncy.get('.action-select-multiple').invoke('val').should('deep.equal', ['fr-apples', 'fr-oranges', 'fr-bananas']);\n// assert the selected values include oranges\ncy.get('.action-select-multiple').invoke('val').should('include', 'fr-oranges');",
              "err": {},
              "uuid": "356ad8f2-76e0-4b54-aae8-7e0b037cb380",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".scrollIntoView() - scroll an element into view",
              "fullTitle": "Actions .scrollIntoView() - scroll an element into view",
              "timedOut": null,
              "duration": 644,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollintoview\n// normally all of these buttons are hidden,\n// because they're not within\n// the viewable area of their parent\n// (we need to scroll to see them)\ncy.get('#scroll-horizontal button').should('not.be.visible');\n// scroll the button into view, as if the user had scrolled\ncy.get('#scroll-horizontal button').scrollIntoView();\ncy.get('#scroll-horizontal button').should('be.visible');\ncy.get('#scroll-vertical button').should('not.be.visible');\n// Cypress handles the scroll direction needed\ncy.get('#scroll-vertical button').scrollIntoView();\ncy.get('#scroll-vertical button').should('be.visible');\ncy.get('#scroll-both button').should('not.be.visible');\n// Cypress knows to scroll to the right and down\ncy.get('#scroll-both button').scrollIntoView();\ncy.get('#scroll-both button').should('be.visible');",
              "err": {},
              "uuid": "0ab7d88b-76cc-4a40-8142-d047852fedbd",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".trigger() - trigger an event on a DOM element",
              "fullTitle": "Actions .trigger() - trigger an event on a DOM element",
              "timedOut": null,
              "duration": 350,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/trigger\n// To interact with a range input (slider)\n// we need to set its value & trigger the\n// event to signal it changed\n// Here, we invoke jQuery's val() method to set\n// the value and trigger the 'change' event\ncy.get('.trigger-input-range').invoke('val', 25);\ncy.get('.trigger-input-range').trigger('change');\ncy.get('.trigger-input-range').get('input[type=range]').siblings('p').should('have.text', '25');",
              "err": {},
              "uuid": "11afa61d-0ef5-4e41-b2d5-af3ac6f54564",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.scrollTo() - scroll the window or element to a position",
              "fullTitle": "Actions cy.scrollTo() - scroll the window or element to a position",
              "timedOut": null,
              "duration": 2464,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/scrollto\n// You can scroll to 9 specific positions of an element:\n//  -----------------------------------\n// | topLeft        top       topRight |\n// |                                   |\n// |                                   |\n// |                                   |\n// | left          center        right |\n// |                                   |\n// |                                   |\n// |                                   |\n// | bottomLeft   bottom   bottomRight |\n//  -----------------------------------\n// if you chain .scrollTo() off of cy, we will\n// scroll the entire window\ncy.scrollTo('bottom');\ncy.get('#scrollable-horizontal').scrollTo('right');\n// or you can scroll to a specific coordinate:\n// (x axis, y axis) in pixels\ncy.get('#scrollable-vertical').scrollTo(250, 250);\n// or you can scroll to a specific percentage\n// of the (width, height) of the element\ncy.get('#scrollable-both').scrollTo('75%', '25%');\n// control the easing of the scroll (default is 'swing')\ncy.get('#scrollable-vertical').scrollTo('center', {\n  easing: 'linear'\n});\n// control the duration of the scroll (in ms)\ncy.get('#scrollable-both').scrollTo('center', {\n  duration: 2000\n});",
              "err": {},
              "uuid": "db6de8ec-37e9-4992-9e82-4fa48b41c6ba",
              "parentUUID": "51f4cb42-a349-4743-a4ac-fc22648abb5e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "906626f3-0281-466d-bdf7-6ac3b6dc42fe",
            "6af3148d-e25e-43ce-9657-0a14709979f8",
            "733d9470-9232-4d2d-a6cf-de7192498534",
            "fa7f0c8e-c131-420e-b9f7-fa13a9192be5",
            "a09e4844-a115-4e70-b85f-b25c8a4eff86",
            "59688d46-c05a-452e-8010-63ecd685a237",
            "34f05a59-bb6a-4eab-8cb6-6cf5e4704879",
            "f05d9ebc-3521-48aa-998d-2d492a17f367",
            "72ca29e0-f406-4ad5-af1a-4d6ece31bf5c",
            "99c708d4-832b-44f3-9db0-51f307d75712",
            "356ad8f2-76e0-4b54-aae8-7e0b037cb380",
            "0ab7d88b-76cc-4a40-8142-d047852fedbd",
            "11afa61d-0ef5-4e41-b2d5-af3ac6f54564",
            "db6de8ec-37e9-4992-9e82-4fa48b41c6ba"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20541,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "96bb4934-175f-4ce5-b36c-4964356f26d2",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\aliasing.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2e799dde-d9ad-4f40-af2c-cc090207fda4",
          "title": "Aliasing",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".as() - alias a DOM element for later use",
              "fullTitle": "Aliasing .as() - alias a DOM element for later use",
              "timedOut": null,
              "duration": 969,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/as\n// Alias a DOM element for use later\n// We don't have to traverse to the element\n// later in our code, we reference it with @\ncy.get('.as-table').find('tbody>tr').first().find('td').first().find('button').as('firstBtn');\n// when we reference the alias, we place an\n// @ in front of its name\ncy.get('@firstBtn').click();\ncy.get('@firstBtn').should('have.class', 'btn-success').and('contain', 'Changed');",
              "err": {},
              "uuid": "cab92070-6c05-4a46-bdcf-895d56aebe61",
              "parentUUID": "2e799dde-d9ad-4f40-af2c-cc090207fda4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".as() - alias a route for later use",
              "fullTitle": "Aliasing .as() - alias a route for later use",
              "timedOut": null,
              "duration": 2663,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Alias the route to wait for its response\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('eq', 200);",
              "err": {},
              "uuid": "e5ed8709-9322-428b-a60f-5c7f4ac09a44",
              "parentUUID": "2e799dde-d9ad-4f40-af2c-cc090207fda4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cab92070-6c05-4a46-bdcf-895d56aebe61",
            "e5ed8709-9322-428b-a60f-5c7f4ac09a44"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3632,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "041a7e39-47f3-412d-bebc-65ed0f012c23",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\assertions.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1817ca39-e5a1-468e-bb9f-00d4601a98a9",
          "title": "Assertions",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "c78a4d2f-8d98-465c-bca7-92e8c4ebd901",
              "title": "Implicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".should() - make an assertion about the current subject",
                  "fullTitle": "Assertions Implicit Assertions .should() - make an assertion about the current subject",
                  "timedOut": null,
                  "duration": 5411,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/should\ncy.get('.assertion-table').find('tbody tr:last').should('have.class', 'success').find('td').first()\n// checking the text of the <td> element in various ways\n.should('have.text', 'Column content').should('contain', 'Column content').should('have.html', 'Column content')\n// chai-jquery uses \"is()\" to check if element matches selector\n.should('match', 'td')\n// to match text content against a regular expression\n// first need to invoke jQuery method text()\n// and then match using regular expression\n.invoke('text').should('match', /column content/i);\n// a better way to check element's text content against a regular expression\n// is to use \"cy.contains\"\n// https://on.cypress.io/contains\ncy.get('.assertion-table').find('tbody tr:last')\n// finds first <td> element with text content matching regular expression\n.contains('td', /column content/i).should('be.visible');\n// for more information about asserting element's text\n// see https://on.cypress.io/using-cypress-faq#How-do-I-get-an-element’s-text-contents",
                  "err": {},
                  "uuid": "03eb1128-e7fb-489f-bbf6-bb580cb9fa45",
                  "parentUUID": "c78a4d2f-8d98-465c-bca7-92e8c4ebd901",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": ".and() - chain multiple assertions together",
                  "fullTitle": "Assertions Implicit Assertions .and() - chain multiple assertions together",
                  "timedOut": null,
                  "duration": 274,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/and\ncy.get('.assertions-link').should('have.class', 'active').and('have.attr', 'href').and('include', 'cypress.io');",
                  "err": {},
                  "uuid": "a7acfb66-75d8-4832-9b16-b38f6d797591",
                  "parentUUID": "c78a4d2f-8d98-465c-bca7-92e8c4ebd901",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "03eb1128-e7fb-489f-bbf6-bb580cb9fa45",
                "a7acfb66-75d8-4832-9b16-b38f6d797591"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 5685,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "bfd161b9-eabe-43ee-a078-d71a1e7ebb17",
              "title": "Explicit Assertions",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "expect - make an assertion about a specified subject",
                  "fullTitle": "Assertions Explicit Assertions expect - make an assertion about a specified subject",
                  "timedOut": null,
                  "duration": 316,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can use Chai's BDD style assertions\nexpect(true).to.be.true;\nconst o = {\n  foo: 'bar'\n};\nexpect(o).to.equal(o);\nexpect(o).to.deep.equal({\n  foo: 'bar'\n});\n// matching text using regular expression\nexpect('FooBar').to.match(/bar$/i);",
                  "err": {},
                  "uuid": "66496ba3-ca64-4431-864f-66777457507e",
                  "parentUUID": "bfd161b9-eabe-43ee-a078-d71a1e7ebb17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "pass your own callback function to should()",
                  "fullTitle": "Assertions Explicit Assertions pass your own callback function to should()",
                  "timedOut": null,
                  "duration": 250,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Pass a function to should that can have any number\n// of explicit assertions within it.\n// The \".should(cb)\" function will be retried\n// automatically until it passes all your explicit assertions or times out.\ncy.get('.assertions-p').find('p').should($p => {\n  // https://on.cypress.io/$\n  // return an array of texts from all of the p's\n  const texts = $p.map((i, el) => Cypress.$(el).text());\n  // jquery map returns jquery object\n  // and .get() convert this to simple array\n  const paragraphs = texts.get();\n  // array should have length of 3\n  expect(paragraphs, 'has 3 paragraphs').to.have.length(3);\n  // use second argument to expect(...) to provide clear\n  // message with each assertion\n  expect(paragraphs, 'has expected text in each paragraph').to.deep.eq(['Some text from first p', 'More text from second p', 'And even more text from third p']);\n});",
                  "err": {},
                  "uuid": "d3a5bb54-3f5e-4419-8f14-38456a3bc138",
                  "parentUUID": "bfd161b9-eabe-43ee-a078-d71a1e7ebb17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "finds element by class name regex",
                  "fullTitle": "Assertions Explicit Assertions finds element by class name regex",
                  "timedOut": null,
                  "duration": 270,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div')\n// .should(cb) callback function will be retried\n.should($div => {\n  expect($div).to.have.length(1);\n  const className = $div[0].className;\n  expect(className).to.match(/heading-/);\n})\n// .then(cb) callback is not retried,\n// it either passes or fails\n.then($div => {\n  expect($div, 'text content').to.have.text('Introduction');\n});",
                  "err": {},
                  "uuid": "5dbaf8a1-13c6-4fca-abbe-f1d8713bcafa",
                  "parentUUID": "bfd161b9-eabe-43ee-a078-d71a1e7ebb17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can throw any error",
                  "fullTitle": "Assertions Explicit Assertions can throw any error",
                  "timedOut": null,
                  "duration": 361,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('.docs-header').find('div').should($div => {\n  if ($div.length !== 1) {\n    // you can throw your own errors\n    throw new Error('Did not find 1 element');\n  }\n  const className = $div[0].className;\n  if (!className.match(/heading-/)) {\n    throw new Error(`Could not find class \"heading-\" in ${className}`);\n  }\n});",
                  "err": {},
                  "uuid": "b7c9e07f-4469-474f-a4b7-ee167f16bcff",
                  "parentUUID": "bfd161b9-eabe-43ee-a078-d71a1e7ebb17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "matches unknown text between two elements",
                  "fullTitle": "Assertions Explicit Assertions matches unknown text between two elements",
                  "timedOut": null,
                  "duration": 256,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "/**\n * Text from the first element.\n * @type {string}\n*/\nlet text;\n/**\n * Normalizes passed text,\n * useful before comparing text with spaces and different capitalization.\n * @param {string} s Text to normalize\n*/\nconst normalizeText = s => s.replace(/\\s/g, '').toLowerCase();\ncy.get('.two-elements').find('.first').then($first => {\n  // save text from the first element\n  text = normalizeText($first.text());\n});\ncy.get('.two-elements').find('.second').should($div => {\n  // we can massage text before comparing\n  const secondText = normalizeText($div.text());\n  expect(secondText, 'second text').to.equal(text);\n});",
                  "err": {},
                  "uuid": "6b34fa31-3060-4459-9085-2e3ab3a89cc3",
                  "parentUUID": "bfd161b9-eabe-43ee-a078-d71a1e7ebb17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "assert - assert shape of an object",
                  "fullTitle": "Assertions Explicit Assertions assert - assert shape of an object",
                  "timedOut": null,
                  "duration": 276,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const person = {\n  name: 'Joe',\n  age: 20\n};\nassert.isObject(person, 'value is object');",
                  "err": {},
                  "uuid": "f824b435-372f-4712-95ce-140ab0f384ba",
                  "parentUUID": "bfd161b9-eabe-43ee-a078-d71a1e7ebb17",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "retries the should callback until assertions pass",
                  "fullTitle": "Assertions Explicit Assertions retries the should callback until assertions pass",
                  "timedOut": null,
                  "duration": 1868,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.get('#random-number').should($div => {\n  const n = parseFloat($div.text());\n  expect(n).to.be.gte(1).and.be.lte(10);\n});",
                  "err": {},
                  "uuid": "f4b224ab-7a2b-42d9-a9c4-8cdb368006aa",
                  "parentUUID": "bfd161b9-eabe-43ee-a078-d71a1e7ebb17",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "66496ba3-ca64-4431-864f-66777457507e",
                "d3a5bb54-3f5e-4419-8f14-38456a3bc138",
                "5dbaf8a1-13c6-4fca-abbe-f1d8713bcafa",
                "b7c9e07f-4469-474f-a4b7-ee167f16bcff",
                "6b34fa31-3060-4459-9085-2e3ab3a89cc3",
                "f824b435-372f-4712-95ce-140ab0f384ba",
                "f4b224ab-7a2b-42d9-a9c4-8cdb368006aa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 3597,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "069560bb-ce5a-4880-86f6-7a1926a01dc6",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\connectors.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "abceda11-df81-4e7e-9b0d-8e7e4d70c1f6",
          "title": "Connectors",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".each() - iterate over an array of elements",
              "fullTitle": "Connectors .each() - iterate over an array of elements",
              "timedOut": null,
              "duration": 687,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/each\ncy.get('.connectors-each-ul>li').each(($el, index, $list) => {\n  console.log($el, index, $list);\n});",
              "err": {},
              "uuid": "cfe521b2-c21d-48c9-bf1d-453bf94832e7",
              "parentUUID": "abceda11-df81-4e7e-9b0d-8e7e4d70c1f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".its() - get properties on the current subject",
              "fullTitle": "Connectors .its() - get properties on the current subject",
              "timedOut": null,
              "duration": 262,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/its\ncy.get('.connectors-its-ul>li')\n// calls the 'length' property yielding that value\n.its('length').should('be.gt', 2);",
              "err": {},
              "uuid": "61a373b9-2e5f-4cd9-b069-d49b3531480e",
              "parentUUID": "abceda11-df81-4e7e-9b0d-8e7e4d70c1f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".invoke() - invoke a function on the current subject",
              "fullTitle": "Connectors .invoke() - invoke a function on the current subject",
              "timedOut": null,
              "duration": 324,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// our div is hidden in our script.js\n// $('.connectors-div').hide()\ncy.get('.connectors-div').should('be.hidden');\n// https://on.cypress.io/invoke\n// call the jquery method 'show' on the 'div.container'\ncy.get('.connectors-div').invoke('show');\ncy.get('.connectors-div').should('be.visible');",
              "err": {},
              "uuid": "da4e8b0f-b7ac-4455-bae2-c671159229a2",
              "parentUUID": "abceda11-df81-4e7e-9b0d-8e7e4d70c1f6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".spread() - spread an array as individual args to callback function",
              "fullTitle": "Connectors .spread() - spread an array as individual args to callback function",
              "timedOut": null,
              "duration": 233,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spread\nconst arr = ['foo', 'bar', 'baz'];\ncy.wrap(arr).spread((foo, bar, baz) => {\n  expect(foo).to.eq('foo');\n  expect(bar).to.eq('bar');\n  expect(baz).to.eq('baz');\n});",
              "err": {},
              "uuid": "b2be8077-67b6-418d-bee7-d1d650e7082b",
              "parentUUID": "abceda11-df81-4e7e-9b0d-8e7e4d70c1f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "1b7188ee-a02f-43f9-9b7c-1acb594565aa",
              "title": ".then()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "invokes a callback function with the current subject",
                  "fullTitle": "Connectors .then() invokes a callback function with the current subject",
                  "timedOut": null,
                  "duration": 243,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/then\ncy.get('.connectors-list > li').then($lis => {\n  expect($lis, '3 items').to.have.length(3);\n  expect($lis.eq(0), 'first item').to.contain('Walk the dog');\n  expect($lis.eq(1), 'second item').to.contain('Feed the cat');\n  expect($lis.eq(2), 'third item').to.contain('Write JavaScript');\n});",
                  "err": {},
                  "uuid": "368a2899-a093-4cdb-b122-b2877824467f",
                  "parentUUID": "1b7188ee-a02f-43f9-9b7c-1acb594565aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the returned value to the next command",
                  "fullTitle": "Connectors .then() yields the returned value to the next command",
                  "timedOut": null,
                  "duration": 260,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  return 2;\n}).then(num => {\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "d9a70f5b-7693-45aa-894d-2b1ee614510a",
                  "parentUUID": "1b7188ee-a02f-43f9-9b7c-1acb594565aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the original subject without return",
                  "fullTitle": "Connectors .then() yields the original subject without return",
                  "timedOut": null,
                  "duration": 222,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note that nothing is returned from this callback\n}).then(num => {\n  // this callback receives the original unchanged value 1\n  expect(num).to.equal(1);\n});",
                  "err": {},
                  "uuid": "bac0b413-d2d2-4b49-ae91-e632943db005",
                  "parentUUID": "1b7188ee-a02f-43f9-9b7c-1acb594565aa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "yields the value yielded by the last Cypress command inside",
                  "fullTitle": "Connectors .then() yields the value yielded by the last Cypress command inside",
                  "timedOut": null,
                  "duration": 255,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.wrap(1).then(num => {\n  expect(num).to.equal(1);\n  // note how we run a Cypress command\n  // the result yielded by this Cypress command\n  // will be passed to the second \".then\"\n  cy.wrap(2);\n}).then(num => {\n  // this callback receives the value yielded by \"cy.wrap(2)\"\n  expect(num).to.equal(2);\n});",
                  "err": {},
                  "uuid": "5156dc3b-f252-49f7-aa9e-580c66a77d08",
                  "parentUUID": "1b7188ee-a02f-43f9-9b7c-1acb594565aa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "368a2899-a093-4cdb-b122-b2877824467f",
                "d9a70f5b-7693-45aa-894d-2b1ee614510a",
                "bac0b413-d2d2-4b49-ae91-e632943db005",
                "5156dc3b-f252-49f7-aa9e-580c66a77d08"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 980,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "cfe521b2-c21d-48c9-bf1d-453bf94832e7",
            "61a373b9-2e5f-4cd9-b069-d49b3531480e",
            "da4e8b0f-b7ac-4455-bae2-c671159229a2",
            "b2be8077-67b6-418d-bee7-d1d650e7082b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1506,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3ed57bdd-3af8-403a-b6f5-48e4f6075965",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cookies.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7b5d1556-4c48-4da3-8fa5-cb9dfa86b47f",
          "title": "Cookies",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.getCookie() - get a browser cookie",
              "fullTitle": "Cookies cy.getCookie() - get a browser cookie",
              "timedOut": null,
              "duration": 864,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookie\ncy.get('#getCookie .set-a-cookie').click();\n// cy.getCookie() yields a cookie object\ncy.getCookie('token').should('have.property', 'value', '123ABC');",
              "err": {},
              "uuid": "0bdc9d79-bdbf-4607-9aea-509daf6eaf74",
              "parentUUID": "7b5d1556-4c48-4da3-8fa5-cb9dfa86b47f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getCookies() - get browser cookies for the current domain",
              "fullTitle": "Cookies cy.getCookies() - get browser cookies for the current domain",
              "timedOut": null,
              "duration": 573,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getcookies\ncy.getCookies().should('be.empty');\ncy.get('#getCookies .set-a-cookie').click();\n// cy.getCookies() yields an array of cookies\ncy.getCookies().should('have.length', 1).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'token');\n  expect(cookies[0]).to.have.property('value', '123ABC');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n});",
              "err": {},
              "uuid": "c06ae110-e72d-4550-8e00-6495bf137193",
              "parentUUID": "7b5d1556-4c48-4da3-8fa5-cb9dfa86b47f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllCookies() - get all browser cookies",
              "fullTitle": "Cookies cy.getAllCookies() - get all browser cookies",
              "timedOut": null,
              "duration": 333,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\n// cy.getAllCookies() yields an array of cookies\ncy.getAllCookies().should('have.length', 2).should(cookies => {\n  // each cookie has these properties\n  expect(cookies[0]).to.have.property('name', 'key');\n  expect(cookies[0]).to.have.property('value', 'value');\n  expect(cookies[0]).to.have.property('httpOnly', false);\n  expect(cookies[0]).to.have.property('secure', false);\n  expect(cookies[0]).to.have.property('domain');\n  expect(cookies[0]).to.have.property('path');\n  expect(cookies[1]).to.have.property('name', 'key');\n  expect(cookies[1]).to.have.property('value', 'value');\n  expect(cookies[1]).to.have.property('httpOnly', false);\n  expect(cookies[1]).to.have.property('secure', false);\n  expect(cookies[1]).to.have.property('domain', '.example.com');\n  expect(cookies[1]).to.have.property('path');\n});",
              "err": {},
              "uuid": "ca22b03a-ff3a-47db-8658-b79886db3c67",
              "parentUUID": "7b5d1556-4c48-4da3-8fa5-cb9dfa86b47f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.setCookie() - set a browser cookie",
              "fullTitle": "Cookies cy.setCookie() - set a browser cookie",
              "timedOut": null,
              "duration": 281,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/setcookie\ncy.getCookies().should('be.empty');\ncy.setCookie('foo', 'bar');\n// cy.getCookie() yields a cookie object\ncy.getCookie('foo').should('have.property', 'value', 'bar');",
              "err": {},
              "uuid": "3b96f399-c5b6-4b75-a108-6d153e786d34",
              "parentUUID": "7b5d1556-4c48-4da3-8fa5-cb9dfa86b47f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookie() - clear a browser cookie",
              "fullTitle": "Cookies cy.clearCookie() - clear a browser cookie",
              "timedOut": null,
              "duration": 324,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookie\ncy.getCookie('token').should('be.null');\ncy.get('#clearCookie .set-a-cookie').click();\ncy.getCookie('token').should('have.property', 'value', '123ABC');\n// cy.clearCookies() yields null\ncy.clearCookie('token');\ncy.getCookie('token').should('be.null');",
              "err": {},
              "uuid": "cb943d4f-b535-4baa-b886-f50474936b17",
              "parentUUID": "7b5d1556-4c48-4da3-8fa5-cb9dfa86b47f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearCookies() - clear browser cookies for the current domain",
              "fullTitle": "Cookies cy.clearCookies() - clear browser cookies for the current domain",
              "timedOut": null,
              "duration": 724,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearcookies\ncy.getCookies().should('be.empty');\ncy.get('#clearCookies .set-a-cookie').click();\ncy.getCookies().should('have.length', 1);\n// cy.clearCookies() yields null\ncy.clearCookies();\ncy.getCookies().should('be.empty');",
              "err": {},
              "uuid": "3fbbc02e-492a-4e7c-928f-19bbaaf8b6e7",
              "parentUUID": "7b5d1556-4c48-4da3-8fa5-cb9dfa86b47f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllCookies() - clear all browser cookies",
              "fullTitle": "Cookies cy.clearAllCookies() - clear all browser cookies",
              "timedOut": null,
              "duration": 529,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallcookies\ncy.getAllCookies().should('be.empty');\ncy.setCookie('key', 'value');\ncy.setCookie('key', 'value', {\n  domain: '.example.com'\n});\ncy.getAllCookies().should('have.length', 2);\n// cy.clearAllCookies() yields null\ncy.clearAllCookies();\ncy.getAllCookies().should('be.empty');",
              "err": {},
              "uuid": "3a36da11-4c40-41d9-ab2c-b2ec419a7653",
              "parentUUID": "7b5d1556-4c48-4da3-8fa5-cb9dfa86b47f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0bdc9d79-bdbf-4607-9aea-509daf6eaf74",
            "c06ae110-e72d-4550-8e00-6495bf137193",
            "ca22b03a-ff3a-47db-8658-b79886db3c67",
            "3b96f399-c5b6-4b75-a108-6d153e786d34",
            "cb943d4f-b535-4baa-b886-f50474936b17",
            "3fbbc02e-492a-4e7c-928f-19bbaaf8b6e7",
            "3a36da11-4c40-41d9-ab2c-b2ec419a7653"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3628,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d08b7eae-340b-4337-977a-33aa3b50d7df",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\cypress_api.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ef6745b6-cb9f-4a04-8409-971b2f47e3ff",
          "title": "Cypress APIs",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "ac51f7d8-6f3b-4a14-bfbf-959bea0a8bc3",
              "title": "Cypress.Commands",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".add() - create a custom command",
                  "fullTitle": "Cypress APIs Cypress.Commands .add() - create a custom command",
                  "timedOut": null,
                  "duration": 561,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Commands.add('console', {\n  prevSubject: true\n}, (subject, method) => {\n  // the previous subject is automatically received\n  // and the commands arguments are shifted\n  // allow us to change the console method used\n  method = method || 'log';\n  // log the subject to the console\n  console[method]('The subject is', subject);\n  // whatever we return becomes the new subject\n  // we don't want to change the subject so\n  // we return whatever was passed in\n  return subject;\n});\ncy.get('button').console('info').then($button => {\n  // subject is still $button\n});",
                  "err": {},
                  "uuid": "96b10316-0dbf-44b0-a5ea-32c3d76a6449",
                  "parentUUID": "ac51f7d8-6f3b-4a14-bfbf-959bea0a8bc3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "96b10316-0dbf-44b0-a5ea-32c3d76a6449"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 561,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "6ee9b35d-ca36-4674-bcda-205a3f9761a1",
              "title": "Cypress.Cookies",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".debug() - enable or disable debugging",
                  "fullTitle": "Cypress APIs Cypress.Cookies .debug() - enable or disable debugging",
                  "timedOut": null,
                  "duration": 262,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Cookies.debug(true);\n// Cypress will now log in the console when\n// cookies are set or cleared\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');\ncy.clearCookie('fakeCookie');\ncy.setCookie('fakeCookie', '123ABC');",
                  "err": {},
                  "uuid": "29a35173-94a7-40a2-91cc-90cca2a322f5",
                  "parentUUID": "6ee9b35d-ca36-4674-bcda-205a3f9761a1",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "29a35173-94a7-40a2-91cc-90cca2a322f5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 262,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "2260bd6e-8b23-4414-ab93-91dac1244552",
              "title": "Cypress.arch",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get CPU architecture name of underlying OS",
                  "fullTitle": "Cypress APIs Cypress.arch Get CPU architecture name of underlying OS",
                  "timedOut": null,
                  "duration": 566,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/arch\nexpect(Cypress.arch).to.exist;",
                  "err": {},
                  "uuid": "42cf4ada-f433-44bf-975b-037f162955ca",
                  "parentUUID": "2260bd6e-8b23-4414-ab93-91dac1244552",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "42cf4ada-f433-44bf-975b-037f162955ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 566,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "652a8fe1-5612-479f-9133-5a9535b07953",
              "title": "Cypress.config()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get and set configuration options",
                  "fullTitle": "Cypress APIs Cypress.config() Get and set configuration options",
                  "timedOut": null,
                  "duration": 1722,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/config\nlet myConfig = Cypress.config();\nexpect(myConfig).to.have.property('animationDistanceThreshold', 5);\nexpect(myConfig).to.have.property('baseUrl', null);\nexpect(myConfig).to.have.property('defaultCommandTimeout', 4000);\nexpect(myConfig).to.have.property('requestTimeout', 5000);\nexpect(myConfig).to.have.property('responseTimeout', 30000);\nexpect(myConfig).to.have.property('viewportHeight', 660);\nexpect(myConfig).to.have.property('viewportWidth', 1000);\nexpect(myConfig).to.have.property('pageLoadTimeout', 60000);\nexpect(myConfig).to.have.property('waitForAnimations', true);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(60000);\n// this will change the config for the rest of your tests!\nCypress.config('pageLoadTimeout', 20000);\nexpect(Cypress.config('pageLoadTimeout')).to.eq(20000);\nCypress.config('pageLoadTimeout', 60000);",
                  "err": {
                    "message": "AssertionError: expected { Object (baseUrl, viewportWidth, ...) } to have property 'baseUrl' of null, but got 'http://localhost:8080/#/'",
                    "estack": "AssertionError: expected { Object (baseUrl, viewportWidth, ...) } to have property 'baseUrl' of null, but got 'http://localhost:8080/#/'\n    at Context.eval (webpack:///./cypress/e2e/2-advanced-examples/cypress_api.cy.js:77:31)",
                    "diff": null
                  },
                  "uuid": "34415b39-5408-4228-b098-ad4d77a0d110",
                  "parentUUID": "652a8fe1-5612-479f-9133-5a9535b07953",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "34415b39-5408-4228-b098-ad4d77a0d110"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1722,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "57c2c1c7-842f-4a58-b8f6-ccd19652f354",
              "title": "Cypress.dom",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": ".isHidden() - determine if a DOM element is hidden",
                  "fullTitle": "Cypress APIs Cypress.dom .isHidden() - determine if a DOM element is hidden",
                  "timedOut": null,
                  "duration": 255,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let hiddenP = Cypress.$('.dom-p p.hidden').get(0);\nlet visibleP = Cypress.$('.dom-p p.visible').get(0);\n// our first paragraph has css class 'hidden'\nexpect(Cypress.dom.isHidden(hiddenP)).to.be.true;\nexpect(Cypress.dom.isHidden(visibleP)).to.be.false;",
                  "err": {},
                  "uuid": "bfe8d264-f9b7-4bcb-8308-7e163c75a785",
                  "parentUUID": "57c2c1c7-842f-4a58-b8f6-ccd19652f354",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "bfe8d264-f9b7-4bcb-8308-7e163c75a785"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 255,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "da7edb4f-f4d0-4fba-b7f4-e2ac316b80b5",
              "title": "Cypress.env()",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get environment variables",
                  "fullTitle": "Cypress APIs Cypress.env() Get environment variables",
                  "timedOut": null,
                  "duration": 304,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/env\n// set multiple environment variables\nCypress.env({\n  host: 'veronica.dev.local',\n  api_server: 'http://localhost:8888/v1/'\n});\n// get environment variable\nexpect(Cypress.env('host')).to.eq('veronica.dev.local');\n// set environment variable\nCypress.env('api_server', 'http://localhost:8888/v2/');\nexpect(Cypress.env('api_server')).to.eq('http://localhost:8888/v2/');\n// get all environment variable\nexpect(Cypress.env()).to.have.property('host', 'veronica.dev.local');\nexpect(Cypress.env()).to.have.property('api_server', 'http://localhost:8888/v2/');",
                  "err": {},
                  "uuid": "c571e7be-4b42-48a9-86d0-4db5f9315f2f",
                  "parentUUID": "da7edb4f-f4d0-4fba-b7f4-e2ac316b80b5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c571e7be-4b42-48a9-86d0-4db5f9315f2f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 304,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "259e4145-7751-4dad-b7bf-ec0fff4d7cdd",
              "title": "Cypress.log",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Control what is printed to the Command Log",
                  "fullTitle": "Cypress APIs Cypress.log Control what is printed to the Command Log",
                  "timedOut": null,
                  "duration": 190,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/cypress-log",
                  "err": {},
                  "uuid": "6258bfbe-2eda-4f67-86f3-5d2406a7cba9",
                  "parentUUID": "259e4145-7751-4dad-b7bf-ec0fff4d7cdd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6258bfbe-2eda-4f67-86f3-5d2406a7cba9"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 190,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "1494299b-73c5-4f84-b58a-603b4ee76d06",
              "title": "Cypress.platform",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get underlying OS name",
                  "fullTitle": "Cypress APIs Cypress.platform Get underlying OS name",
                  "timedOut": null,
                  "duration": 252,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/platform\nexpect(Cypress.platform).to.be.exist;",
                  "err": {},
                  "uuid": "b87266b1-bf83-45f5-840a-a3b5db2ccc1d",
                  "parentUUID": "1494299b-73c5-4f84-b58a-603b4ee76d06",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "b87266b1-bf83-45f5-840a-a3b5db2ccc1d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 252,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "42de3ce9-48a7-4f86-92d2-74cc5af6b6d4",
              "title": "Cypress.version",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current version of Cypress being run",
                  "fullTitle": "Cypress APIs Cypress.version Get current version of Cypress being run",
                  "timedOut": null,
                  "duration": 240,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/version\nexpect(Cypress.version).to.be.exist;",
                  "err": {},
                  "uuid": "e50f9bcf-ade7-4b5f-b1bf-3d394a75472f",
                  "parentUUID": "42de3ce9-48a7-4f86-92d2-74cc5af6b6d4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e50f9bcf-ade7-4b5f-b1bf-3d394a75472f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 240,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "08aa235a-8a0c-46d5-b5e2-d03062a136cf",
              "title": "Cypress.spec",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Get current spec information",
                  "fullTitle": "Cypress APIs Cypress.spec Get current spec information",
                  "timedOut": null,
                  "duration": 243,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/spec\n// wrap the object so we can inspect it easily by clicking in the command log\ncy.wrap(Cypress.spec).should('include.keys', ['name', 'relative', 'absolute']);",
                  "err": {},
                  "uuid": "6a9f99e9-26db-4d7d-b5e0-13c5326001e6",
                  "parentUUID": "08aa235a-8a0c-46d5-b5e2-d03062a136cf",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a9f99e9-26db-4d7d-b5e0-13c5326001e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 243,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "db79c08e-27e4-4fbe-b184-5ad09ebe4ab6",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\files.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4e9f2e93-b618-4886-8f58-d6905e72d2b2",
          "title": "Files",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.fixture() - load a fixture",
              "fullTitle": "Files cy.fixture() - load a fixture",
              "timedOut": null,
              "duration": 1041,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/fixture\n// Instead of writing a response inline you can\n// use a fixture file's content.\n// when application makes an Ajax request matching \"GET **/comments/*\"\n// Cypress will intercept it and reply with the object in `example.json` fixture\ncy.intercept('GET', '**/comments/*', {\n  fixture: 'example.json'\n}).as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.fixture-btn').click();\ncy.wait('@getComment').its('response.body').should('have.property', 'name').and('include', 'Using fixtures to represent data');",
              "err": {},
              "uuid": "b2f197c7-03cc-4812-a39e-f6a85b6ccd6a",
              "parentUUID": "4e9f2e93-b618-4886-8f58-d6905e72d2b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.fixture() or require - load a fixture",
              "fullTitle": "Files cy.fixture() or require - load a fixture",
              "timedOut": null,
              "duration": 242,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// we are inside the \"function () { ... }\"\n// callback and can use test context object \"this\"\n// \"this.example\" was loaded in \"beforeEach\" function callback\nexpect(this.example, 'fixture in the test context').to.deep.equal(requiredExample);\n// or use \"cy.wrap\" and \"should('deep.equal', ...)\" assertion\ncy.wrap(this.example).should('deep.equal', requiredExample);",
              "err": {},
              "uuid": "df3b29ca-45f7-4ef0-9c00-9ed0a82cbaad",
              "parentUUID": "4e9f2e93-b618-4886-8f58-d6905e72d2b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.readFile() - read file contents",
              "fullTitle": "Files cy.readFile() - read file contents",
              "timedOut": null,
              "duration": 340,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/readfile\n// You can read a file and yield its contents\n// The filePath is relative to your project's root.\ncy.readFile(Cypress.config('configFile')).then(config => {\n  expect(config).to.be.an('string');\n});",
              "err": {},
              "uuid": "62118d55-ba23-479d-b2ac-88cd751a9078",
              "parentUUID": "4e9f2e93-b618-4886-8f58-d6905e72d2b2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.writeFile() - write to a file",
              "fullTitle": "Files cy.writeFile() - write to a file",
              "timedOut": null,
              "duration": 2841,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/writefile\n// You can write to a file\n// Use a response from a request to automatically\n// generate a fixture file for use later\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  cy.writeFile('cypress/fixtures/users.json', response.body);\n});\ncy.fixture('users').should(users => {\n  expect(users[0].name).to.exist;\n});\n// JavaScript arrays and objects are stringified\n// and formatted into text.\ncy.writeFile('cypress/fixtures/profile.json', {\n  id: 8739,\n  name: 'Jane',\n  email: 'jane@example.com'\n});\ncy.fixture('profile').should(profile => {\n  expect(profile.name).to.eq('Jane');\n});",
              "err": {},
              "uuid": "6fa0bf88-798a-4d45-9164-9c5559d7f949",
              "parentUUID": "4e9f2e93-b618-4886-8f58-d6905e72d2b2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b2f197c7-03cc-4812-a39e-f6a85b6ccd6a",
            "df3b29ca-45f7-4ef0-9c00-9ed0a82cbaad",
            "62118d55-ba23-479d-b2ac-88cd751a9078",
            "6fa0bf88-798a-4d45-9164-9c5559d7f949"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4464,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5676702e-09ef-4a2c-9c3e-5988e34ea7e1",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\location.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bf1a120a-fc44-4a5d-beff-fcec388ed657",
          "title": "Location",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.hash() - get the current URL hash",
              "fullTitle": "Location cy.hash() - get the current URL hash",
              "timedOut": null,
              "duration": 3646,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/hash\ncy.hash().should('be.empty');",
              "err": {},
              "uuid": "1da2fb18-1de1-4c62-b9c2-d6ee7eb62a49",
              "parentUUID": "bf1a120a-fc44-4a5d-beff-fcec388ed657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.location() - get window.location",
              "fullTitle": "Location cy.location() - get window.location",
              "timedOut": null,
              "duration": 574,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/location\ncy.location().should(location => {\n  expect(location.hash).to.be.empty;\n  expect(location.href).to.eq('https://example.cypress.io/commands/location');\n  expect(location.host).to.eq('example.cypress.io');\n  expect(location.hostname).to.eq('example.cypress.io');\n  expect(location.origin).to.eq('https://example.cypress.io');\n  expect(location.pathname).to.eq('/commands/location');\n  expect(location.port).to.eq('');\n  expect(location.protocol).to.eq('https:');\n  expect(location.search).to.be.empty;\n});",
              "err": {},
              "uuid": "4879850a-d78b-4981-a0ff-839be2a6762f",
              "parentUUID": "bf1a120a-fc44-4a5d-beff-fcec388ed657",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.url() - get the current URL",
              "fullTitle": "Location cy.url() - get the current URL",
              "timedOut": null,
              "duration": 199,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/url\ncy.url().should('eq', 'https://example.cypress.io/commands/location');",
              "err": {},
              "uuid": "4c431f81-5721-4005-837e-45f6bd95ae3b",
              "parentUUID": "bf1a120a-fc44-4a5d-beff-fcec388ed657",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1da2fb18-1de1-4c62-b9c2-d6ee7eb62a49",
            "4879850a-d78b-4981-a0ff-839be2a6762f",
            "4c431f81-5721-4005-837e-45f6bd95ae3b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4419,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "5251c815-630c-4d52-98f9-a975561685cf",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\misc.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a4bcabc3-1554-47b0-bd97-31f7ca45f852",
          "title": "Misc",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.exec() - execute a system command",
              "fullTitle": "Misc cy.exec() - execute a system command",
              "timedOut": null,
              "duration": 3227,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// execute a system command.\n// so you can take actions necessary for\n// your test outside the scope of Cypress.\n// https://on.cypress.io/exec\n// we can use Cypress.platform string to\n// select appropriate command\n// https://on.cypress/io/platform\ncy.log(`Platform ${Cypress.platform} architecture ${Cypress.arch}`);\n// on CircleCI Windows build machines we have a failure to run bash shell\n// https://github.com/cypress-io/cypress/issues/5169\n// so skip some of the tests by passing flag \"--env circle=true\"\nconst isCircleOnWindows = Cypress.platform === 'win32' && Cypress.env('circle');\nif (isCircleOnWindows) {\n  cy.log('Skipping test on CircleCI');\n  return;\n}\n// cy.exec problem on Shippable CI\n// https://github.com/cypress-io/cypress/issues/6718\nconst isShippable = Cypress.platform === 'linux' && Cypress.env('shippable');\nif (isShippable) {\n  cy.log('Skipping test on ShippableCI');\n  return;\n}\ncy.exec('echo Jane Lane').its('stdout').should('contain', 'Jane Lane');\nif (Cypress.platform === 'win32') {\n  cy.exec(`print ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n} else {\n  cy.exec(`cat ${Cypress.config('configFile')}`).its('stderr').should('be.empty');\n  cy.exec('pwd').its('code').should('eq', 0);\n}",
              "err": {},
              "uuid": "e2496aef-d2fd-4f00-ba7b-4effb937bf26",
              "parentUUID": "a4bcabc3-1554-47b0-bd97-31f7ca45f852",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.focused() - get the DOM element that has focus",
              "fullTitle": "Misc cy.focused() - get the DOM element that has focus",
              "timedOut": null,
              "duration": 4080,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/focused\ncy.get('.misc-form').find('#name').click();\ncy.focused().should('have.id', 'name');\ncy.get('.misc-form').find('#description').click();\ncy.focused().should('have.id', 'description');",
              "err": {},
              "uuid": "f891fbe2-e42f-41d6-9344-a1e764f78beb",
              "parentUUID": "a4bcabc3-1554-47b0-bd97-31f7ca45f852",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wrap() - wrap an object",
              "fullTitle": "Misc cy.wrap() - wrap an object",
              "timedOut": null,
              "duration": 551,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/wrap\ncy.wrap({\n  foo: 'bar'\n}).should('have.property', 'foo').and('include', 'bar');",
              "err": {},
              "uuid": "bbf261e5-c8e9-47d7-afff-8958b6a42c61",
              "parentUUID": "a4bcabc3-1554-47b0-bd97-31f7ca45f852",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "3adcd5f4-4c10-4ad3-b422-2140e492de75",
              "title": "Cypress.Screenshot",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "cy.screenshot() - take a screenshot",
                  "fullTitle": "Misc Cypress.Screenshot cy.screenshot() - take a screenshot",
                  "timedOut": null,
                  "duration": 6965,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// https://on.cypress.io/screenshot\ncy.screenshot('my-image');",
                  "err": {},
                  "uuid": "e6872fc2-ea79-4141-b82b-20fe19fc2b69",
                  "parentUUID": "3adcd5f4-4c10-4ad3-b422-2140e492de75",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Cypress.Screenshot.defaults() - change default config of screenshots",
                  "fullTitle": "Misc Cypress.Screenshot Cypress.Screenshot.defaults() - change default config of screenshots",
                  "timedOut": null,
                  "duration": 555,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "Cypress.Screenshot.defaults({\n  blackout: ['.foo'],\n  capture: 'viewport',\n  clip: {\n    x: 0,\n    y: 0,\n    width: 200,\n    height: 200\n  },\n  scale: false,\n  disableTimersAndAnimations: true,\n  screenshotOnRunFailure: true,\n  onBeforeScreenshot() {},\n  onAfterScreenshot() {}\n});",
                  "err": {},
                  "uuid": "061fc694-261a-4086-bf01-df40a39b90be",
                  "parentUUID": "3adcd5f4-4c10-4ad3-b422-2140e492de75",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e6872fc2-ea79-4141-b82b-20fe19fc2b69",
                "061fc694-261a-4086-bf01-df40a39b90be"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7520,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "e2496aef-d2fd-4f00-ba7b-4effb937bf26",
            "f891fbe2-e42f-41d6-9344-a1e764f78beb",
            "bbf261e5-c8e9-47d7-afff-8958b6a42c61"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7858,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "357c1359-60e5-498b-bfbf-e7bd18b99360",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\navigation.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ca760403-de65-46e0-bee7-5f3aa9953df7",
          "title": "Navigation",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.go() - go back or forward in the browser's history",
              "fullTitle": "Navigation cy.go() - go back or forward in the browser's history",
              "timedOut": null,
              "duration": 2071,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/go\ncy.location('pathname').should('include', 'navigation');\ncy.go('back');\ncy.location('pathname').should('not.include', 'navigation');\ncy.go('forward');\ncy.location('pathname').should('include', 'navigation');\n// clicking back\ncy.go(-1);\ncy.location('pathname').should('not.include', 'navigation');\n// clicking forward\ncy.go(1);\ncy.location('pathname').should('include', 'navigation');",
              "err": {},
              "uuid": "98bdd647-3e77-487a-9c38-38891ef7f508",
              "parentUUID": "ca760403-de65-46e0-bee7-5f3aa9953df7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.reload() - reload the page",
              "fullTitle": "Navigation cy.reload() - reload the page",
              "timedOut": null,
              "duration": 1145,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/reload\ncy.reload();\n// reload the page without using the cache\ncy.reload(true);",
              "err": {},
              "uuid": "f6809f02-1392-48a5-ba73-df3d36a9e5fc",
              "parentUUID": "ca760403-de65-46e0-bee7-5f3aa9953df7",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.visit() - visit a remote url",
              "fullTitle": "Navigation cy.visit() - visit a remote url",
              "timedOut": null,
              "duration": 787,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/visit\n// Visit any sub-domain of your current domain\n// Pass options to the visit\ncy.visit('https://example.cypress.io/commands/navigation', {\n  timeout: 50000,\n  // increase total time for the visit to resolve\n  onBeforeLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  },\n  onLoad(contentWindow) {\n    // contentWindow is the remote page's window object\n    expect(typeof contentWindow === 'object').to.be.true;\n  }\n});",
              "err": {},
              "uuid": "e461d068-1f5d-4b57-92b6-09dbb6714c13",
              "parentUUID": "ca760403-de65-46e0-bee7-5f3aa9953df7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "98bdd647-3e77-487a-9c38-38891ef7f508",
            "f6809f02-1392-48a5-ba73-df3d36a9e5fc",
            "e461d068-1f5d-4b57-92b6-09dbb6714c13"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4003,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3cc1dc20-7bd6-43e1-a286-62fe303b588f",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\network_requests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "360b2478-3596-4a4e-a368-f16acded5bab",
          "title": "Network Requests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.request() - make an XHR request",
              "fullTitle": "Network Requests cy.request() - make an XHR request",
              "timedOut": null,
              "duration": 4081,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/request\ncy.request('https://jsonplaceholder.cypress.io/comments').should(response => {\n  expect(response.status).to.eq(200);\n  // the server sometimes gets an extra comment posted from another machine\n  // which gets returned as 1 extra object\n  expect(response.body).to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.have.property('headers');\n  expect(response).to.have.property('duration');\n});",
              "err": {},
              "uuid": "bdffe248-3d7f-4c59-ac3e-564fb9d25816",
              "parentUUID": "360b2478-3596-4a4e-a368-f16acded5bab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - verify response using BDD syntax",
              "fullTitle": "Network Requests cy.request() - verify response using BDD syntax",
              "timedOut": null,
              "duration": 840,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request('https://jsonplaceholder.cypress.io/comments').then(response => {\n  // https://on.cypress.io/assertions\n  expect(response).property('status').to.equal(200);\n  expect(response).property('body').to.have.property('length').and.be.oneOf([500, 501]);\n  expect(response).to.include.keys('headers', 'duration');\n});",
              "err": {},
              "uuid": "1a8b16f1-477c-4fcc-acd7-f1ac19123bbf",
              "parentUUID": "360b2478-3596-4a4e-a368-f16acded5bab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() with query parameters",
              "fullTitle": "Network Requests cy.request() with query parameters",
              "timedOut": null,
              "duration": 1039,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// will execute request\n// https://jsonplaceholder.cypress.io/comments?postId=1&id=3\ncy.request({\n  url: 'https://jsonplaceholder.cypress.io/comments',\n  qs: {\n    postId: 1,\n    id: 3\n  }\n}).its('body').should('be.an', 'array').and('have.length', 1).its('0') // yields first element of the array\n.should('contain', {\n  postId: 1,\n  id: 3\n});",
              "err": {},
              "uuid": "1c2f7506-d8c7-4ebe-b2e6-a86954deae9c",
              "parentUUID": "360b2478-3596-4a4e-a368-f16acded5bab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - pass result to the second request",
              "fullTitle": "Network Requests cy.request() - pass result to the second request",
              "timedOut": null,
              "duration": 1072,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// first, let's find out the userId of the first user we have\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body') // yields the response object\n.its('0') // yields the first element of the returned list\n// the above two commands its('body').its('0')\n// can be written as its('body.0')\n// if you do not care about TypeScript checks\n.then(user => {\n  expect(user).property('id').to.be.a('number');\n  // make a new post on behalf of the user\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  });\n})\n// note that the value here is the returned value of the 2nd request\n// which is the new post object\n.then(response => {\n  expect(response).property('status').to.equal(201); // new entity created\n  expect(response).property('body').to.contain({\n    title: 'Cypress Test Runner'\n  });\n  // we don't know the exact post id - only that it will be > 100\n  // since JSONPlaceholder has built-in 100 posts\n  expect(response.body).property('id').to.be.a('number').and.to.be.gt(100);\n  // we don't know the user id here - since it was in above closure\n  // so in this test just confirm that the property is there\n  expect(response.body).property('userId').to.be.a('number');\n});",
              "err": {},
              "uuid": "1fd9fafc-fa89-433b-825f-6378e13a2874",
              "parentUUID": "360b2478-3596-4a4e-a368-f16acded5bab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.request() - save response in the shared test context",
              "fullTitle": "Network Requests cy.request() - save response in the shared test context",
              "timedOut": null,
              "duration": 918,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/variables-and-aliases\ncy.request('https://jsonplaceholder.cypress.io/users?_limit=1').its('body').its('0') // yields the first element of the returned list\n.as('user') // saves the object in the test context\n.then(function () {\n  // NOTE 👀\n  //  By the time this callback runs the \"as('user')\" command\n  //  has saved the user object in the test context.\n  //  To access the test context we need to use\n  //  the \"function () { ... }\" callback form,\n  //  otherwise \"this\" points at a wrong or undefined object!\n  cy.request('POST', 'https://jsonplaceholder.cypress.io/posts', {\n    userId: this.user.id,\n    title: 'Cypress Test Runner',\n    body: 'Fast, easy and reliable testing for anything that runs in a browser.'\n  }).its('body').as('post'); // save the new post from the response\n}).then(function () {\n  // When this callback runs, both \"cy.request\" API commands have finished\n  // and the test context has \"user\" and \"post\" objects set.\n  // Let's verify them.\n  expect(this.post, 'post has the right user id').property('userId').to.equal(this.user.id);\n});",
              "err": {},
              "uuid": "3d94d774-c166-4f42-a7cf-bad0027d29d1",
              "parentUUID": "360b2478-3596-4a4e-a368-f16acded5bab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.intercept() - route responses to matching requests",
              "fullTitle": "Network Requests cy.intercept() - route responses to matching requests",
              "timedOut": null,
              "duration": 2785,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/intercept\nlet message = 'whoa, this comment does not exist';\n// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// https://on.cypress.io/wait\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);\n// Listen to POST to comments\ncy.intercept('POST', '**/comments').as('postComment');\n// we have code that posts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-post').click();\ncy.wait('@postComment').should(({\n  request,\n  response\n}) => {\n  expect(request.body).to.include('email');\n  expect(request.headers).to.have.property('content-type');\n  expect(response && response.body).to.have.property('name', 'Using POST in cy.intercept()');\n});\n// Stub a response to PUT comments/ ****\ncy.intercept({\n  method: 'PUT',\n  url: '**/comments/*'\n}, {\n  statusCode: 404,\n  body: {\n    error: message\n  },\n  headers: {\n    'access-control-allow-origin': '*'\n  },\n  delayMs: 500\n}).as('putComment');\n// we have code that puts a comment when\n// the button is clicked in scripts.js\ncy.get('.network-put').click();\ncy.wait('@putComment');\n// our 404 statusCode logic in scripts.js executed\ncy.get('.network-put-comment').should('contain', message);",
              "err": {},
              "uuid": "fb9fcfca-6e16-4100-9ce6-191b8c7590c0",
              "parentUUID": "360b2478-3596-4a4e-a368-f16acded5bab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bdffe248-3d7f-4c59-ac3e-564fb9d25816",
            "1a8b16f1-477c-4fcc-acd7-f1ac19123bbf",
            "1c2f7506-d8c7-4ebe-b2e6-a86954deae9c",
            "1fd9fafc-fa89-433b-825f-6378e13a2874",
            "3d94d774-c166-4f42-a7cf-bad0027d29d1",
            "fb9fcfca-6e16-4100-9ce6-191b8c7590c0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10735,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "af78c21d-3ded-4028-a309-406d87dcebcd",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\querying.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "9b615773-ce68-42b5-8593-2fed1c373983",
          "title": "Querying",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.get() - query DOM elements",
              "fullTitle": "Querying cy.get() - query DOM elements",
              "timedOut": null,
              "duration": 894,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/get\ncy.get('#query-btn').should('contain', 'Button');\ncy.get('.query-btn').should('contain', 'Button');\ncy.get('#querying .well>button:first').should('contain', 'Button');\n//              ↲\n// Use CSS selectors just like jQuery\ncy.get('[data-test-id=\"test-example\"]').should('have.class', 'example');\n// 'cy.get()' yields jQuery object, you can get its attribute\n// by invoking `.attr()` method\ncy.get('[data-test-id=\"test-example\"]').invoke('attr', 'data-test-id').should('equal', 'test-example');\n// or you can get element's CSS property\ncy.get('[data-test-id=\"test-example\"]').invoke('css', 'position').should('equal', 'static');\n// or use assertions directly during 'cy.get()'\n// https://on.cypress.io/assertions\ncy.get('[data-test-id=\"test-example\"]').should('have.attr', 'data-test-id', 'test-example').and('have.css', 'position', 'static');",
              "err": {},
              "uuid": "31240561-6c34-4c12-be4b-6943510d3169",
              "parentUUID": "9b615773-ce68-42b5-8593-2fed1c373983",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.contains() - query DOM elements with matching content",
              "fullTitle": "Querying cy.contains() - query DOM elements with matching content",
              "timedOut": null,
              "duration": 350,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/contains\ncy.get('.query-list').contains('bananas').should('have.class', 'third');\n// we can pass a regexp to `.contains()`\ncy.get('.query-list').contains(/^b\\w+/).should('have.class', 'third');\ncy.get('.query-list').contains('apples').should('have.class', 'first');\n// passing a selector to contains will\n// yield the selector containing the text\ncy.get('#querying').contains('ul', 'oranges').should('have.class', 'query-list');\ncy.get('.query-button').contains('Save Form').should('have.class', 'btn');",
              "err": {},
              "uuid": "88c9a697-eccd-4414-960e-931500e3d0a8",
              "parentUUID": "9b615773-ce68-42b5-8593-2fed1c373983",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".within() - query DOM elements within a specific element",
              "fullTitle": "Querying .within() - query DOM elements within a specific element",
              "timedOut": null,
              "duration": 309,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/within\ncy.get('.query-form').within(() => {\n  cy.get('input:first').should('have.attr', 'placeholder', 'Email');\n  cy.get('input:last').should('have.attr', 'placeholder', 'Password');\n});",
              "err": {},
              "uuid": "3c5b1ff0-568b-4de2-bb3d-8195436a0e19",
              "parentUUID": "9b615773-ce68-42b5-8593-2fed1c373983",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.root() - query the root DOM element",
              "fullTitle": "Querying cy.root() - query the root DOM element",
              "timedOut": null,
              "duration": 307,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/root\n// By default, root is the document\ncy.root().should('match', 'html');\ncy.get('.query-ul').within(() => {\n  // In this within, the root is now the ul DOM element\n  cy.root().should('have.class', 'query-ul');\n});",
              "err": {},
              "uuid": "25bdb4c1-12c6-410c-a9d8-14ea4075770c",
              "parentUUID": "9b615773-ce68-42b5-8593-2fed1c373983",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "best practices - selecting elements",
              "fullTitle": "Querying best practices - selecting elements",
              "timedOut": null,
              "duration": 1047,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/best-practices#Selecting-Elements\ncy.get('[data-cy=best-practices-selecting-elements]').within(() => {\n  // Worst - too generic, no context\n  cy.get('button').click();\n  // Bad. Coupled to styling. Highly subject to change.\n  cy.get('.btn.btn-large').click();\n  // Average. Coupled to the `name` attribute which has HTML semantics.\n  cy.get('[name=submission]').click();\n  // Better. But still coupled to styling or JS event listeners.\n  cy.get('#main').click();\n  // Slightly better. Uses an ID but also ensures the element\n  // has an ARIA role attribute\n  cy.get('#main[role=button]').click();\n  // Much better. But still coupled to text content that may change.\n  cy.contains('Submit').click();\n  // Best. Insulated from all changes.\n  cy.get('[data-cy=submit]').click();\n});",
              "err": {},
              "uuid": "d7d24217-1214-4da7-95c5-ff8cacbe2381",
              "parentUUID": "9b615773-ce68-42b5-8593-2fed1c373983",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "31240561-6c34-4c12-be4b-6943510d3169",
            "88c9a697-eccd-4414-960e-931500e3d0a8",
            "3c5b1ff0-568b-4de2-bb3d-8195436a0e19",
            "25bdb4c1-12c6-410c-a9d8-14ea4075770c",
            "d7d24217-1214-4da7-95c5-ff8cacbe2381"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2907,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cc633f88-b90f-4841-8d04-127e8985a697",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\spies_stubs_clocks.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "37e7ac7e-f40b-40ab-9136-c0d6ce67d3e8",
          "title": "Spies, Stubs, and Clock",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.spy() - wrap a method in a spy",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() - wrap a method in a spy",
              "timedOut": null,
              "duration": 506,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/spy\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  foo() {}\n};\nconst spy = cy.spy(obj, 'foo').as('anyArgs');\nobj.foo();\nexpect(spy).to.be.called;",
              "err": {},
              "uuid": "6b56577a-e3f9-4d03-94cd-883215b3255f",
              "parentUUID": "37e7ac7e-f40b-40ab-9136-c0d6ce67d3e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.spy() retries until assertions pass",
              "fullTitle": "Spies, Stubs, and Clock cy.spy() retries until assertions pass",
              "timedOut": null,
              "duration": 2551,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * Prints the argument passed\n   * @param x {any}\n  */\n  foo(x) {\n    console.log('obj.foo called with', x);\n  }\n};\ncy.spy(obj, 'foo').as('foo');\nsetTimeout(() => {\n  obj.foo('first');\n}, 500);\nsetTimeout(() => {\n  obj.foo('second');\n}, 2500);\ncy.get('@foo').should('have.been.calledTwice');",
              "err": {},
              "uuid": "e569b5fa-38a4-4d6d-aa79-e66e4adce794",
              "parentUUID": "37e7ac7e-f40b-40ab-9136-c0d6ce67d3e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() - create a stub and/or replace a function with stub",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() - create a stub and/or replace a function with stub",
              "timedOut": null,
              "duration": 556,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/stub\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\nconst obj = {\n  /**\n   * prints both arguments to the console\n   * @param a {string}\n   * @param b {string}\n  */\n  foo(a, b) {\n    console.log('a', a, 'b', b);\n  }\n};\nconst stub = cy.stub(obj, 'foo').as('foo');\nobj.foo('foo', 'bar');\nexpect(stub).to.be.called;",
              "err": {},
              "uuid": "45f26710-900f-49ed-bf33-10d86ec58042",
              "parentUUID": "37e7ac7e-f40b-40ab-9136-c0d6ce67d3e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clock() - control time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.clock() - control time in the browser",
              "timedOut": null,
              "duration": 394,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clock\n// create the date in UTC so it's always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#clock-div').click();\ncy.get('#clock-div').should('have.text', '1489449600');",
              "err": {},
              "uuid": "e4aac85f-3cfa-44f2-893c-b1c3a8b75bcf",
              "parentUUID": "37e7ac7e-f40b-40ab-9136-c0d6ce67d3e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.tick() - move time in the browser",
              "fullTitle": "Spies, Stubs, and Clock cy.tick() - move time in the browser",
              "timedOut": null,
              "duration": 381,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/tick\n// create the date in UTC so it's always the same\n// no matter what local timezone the browser is running in\nconst now = new Date(Date.UTC(2017, 2, 14)).getTime();\ncy.clock(now);\ncy.visit('https://example.cypress.io/commands/spies-stubs-clocks');\ncy.get('#tick-div').click();\ncy.get('#tick-div').should('have.text', '1489449600');\ncy.tick(10000); // 10 seconds passed\ncy.get('#tick-div').click();\ncy.get('#tick-div').should('have.text', '1489449610');",
              "err": {},
              "uuid": "854236da-2858-4d52-aa97-062ba9e27483",
              "parentUUID": "37e7ac7e-f40b-40ab-9136-c0d6ce67d3e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.stub() matches depending on arguments",
              "fullTitle": "Spies, Stubs, and Clock cy.stub() matches depending on arguments",
              "timedOut": null,
              "duration": 52,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst greeter = {\n  /**\n   * Greets a person\n   * @param {string} name\n  */\n  greet(name) {\n    return `Hello, ${name}!`;\n  }\n};\ncy.stub(greeter, 'greet').callThrough() // if you want non-matched calls to call the real method\n.withArgs(Cypress.sinon.match.string).returns('Hi').withArgs(Cypress.sinon.match.number).throws(new Error('Invalid name'));\nexpect(greeter.greet('World')).to.equal('Hi');\nexpect(() => greeter.greet(42)).to.throw('Invalid name');\nexpect(greeter.greet).to.have.been.calledTwice;\n// non-matched calls goes the actual method\nexpect(greeter.greet()).to.equal('Hello, undefined!');",
              "err": {},
              "uuid": "c67fc586-e0b8-4ca7-bd82-7eb07605da61",
              "parentUUID": "37e7ac7e-f40b-40ab-9136-c0d6ce67d3e8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "matches call arguments using Sinon matchers",
              "fullTitle": "Spies, Stubs, and Clock matches call arguments using Sinon matchers",
              "timedOut": null,
              "duration": 74,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// see all possible matchers at\n// https://sinonjs.org/releases/latest/matchers/\nconst calculator = {\n  /**\n   * returns the sum of two arguments\n   * @param a {number}\n   * @param b {number}\n  */\n  add(a, b) {\n    return a + b;\n  }\n};\nconst spy = cy.spy(calculator, 'add').as('add');\nexpect(calculator.add(2, 3)).to.equal(5);\n// if we want to assert the exact values used during the call\nexpect(spy).to.be.calledWith(2, 3);\n// let's confirm \"add\" method was called with two numbers\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match.number);\n// alternatively, provide the value to match\nexpect(spy).to.be.calledWith(Cypress.sinon.match(2), Cypress.sinon.match(3));\n// match any value\nexpect(spy).to.be.calledWith(Cypress.sinon.match.any, 3);\n// match any value from a list\nexpect(spy).to.be.calledWith(Cypress.sinon.match.in([1, 2, 3]), 3);\n/**\n * Returns true if the given number is even\n * @param {number} x\n */\nconst isEven = x => x % 2 === 0;\n// expect the value to pass a custom predicate function\n// the second argument to \"sinon.match(predicate, message)\" is\n// shown if the predicate does not pass and assertion fails\nexpect(spy).to.be.calledWith(Cypress.sinon.match(isEven, 'isEven'), 3);\n/**\n * Returns a function that checks if a given number is larger than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isGreaterThan = limit => x => x > limit;\n/**\n * Returns a function that checks if a given number is less than the limit\n * @param {number} limit\n * @returns {(x: number) => boolean}\n */\nconst isLessThan = limit => x => x < limit;\n// you can combine several matchers using \"and\", \"or\"\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(2), '> 2').and(Cypress.sinon.match(isLessThan(4), '< 4')));\nexpect(spy).to.be.calledWith(Cypress.sinon.match.number, Cypress.sinon.match(isGreaterThan(200), '> 200').or(Cypress.sinon.match(3)));\n// matchers can be used from BDD assertions\ncy.get('@add').should('have.been.calledWith', Cypress.sinon.match.number, Cypress.sinon.match(3));\n// you can alias matchers for shorter test code\nconst {\n  match: M\n} = Cypress.sinon;\ncy.get('@add').should('have.been.calledWith', M.number, M(3));",
              "err": {},
              "uuid": "d3854d5d-ebe9-4b65-bd4d-c201a347460e",
              "parentUUID": "37e7ac7e-f40b-40ab-9136-c0d6ce67d3e8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6b56577a-e3f9-4d03-94cd-883215b3255f",
            "e569b5fa-38a4-4d6d-aa79-e66e4adce794",
            "45f26710-900f-49ed-bf33-10d86ec58042",
            "e4aac85f-3cfa-44f2-893c-b1c3a8b75bcf",
            "854236da-2858-4d52-aa97-062ba9e27483",
            "c67fc586-e0b8-4ca7-bd82-7eb07605da61",
            "d3854d5d-ebe9-4b65-bd4d-c201a347460e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4514,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9338be7d-868f-47a5-a9b8-8d55d5226aad",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\storage.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "91b4a52e-cc95-42cf-854e-665045971303",
          "title": "Local Storage / Session Storage",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "fullTitle": "Local Storage / Session Storage cy.clearLocalStorage() - clear all data in localStorage for the current origin",
              "timedOut": null,
              "duration": 918,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearlocalstorage\ncy.get('.ls-btn').click();\ncy.get('.ls-btn').should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\ncy.clearLocalStorage();\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.be.null;\n  expect(localStorage.getItem('prop3')).to.be.null;\n});\ncy.get('.ls-btn').click();\ncy.get('.ls-btn').should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear key matching string in localStorage\ncy.clearLocalStorage('prop1');\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\ncy.get('.ls-btn').click();\ncy.get('.ls-btn').should(() => {\n  expect(localStorage.getItem('prop1')).to.eq('red');\n  expect(localStorage.getItem('prop2')).to.eq('blue');\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});\n// Clear keys matching regex in localStorage\ncy.clearLocalStorage(/prop1|2/);\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.be.null;\n  expect(localStorage.getItem('prop3')).to.eq('magenta');\n});",
              "err": {},
              "uuid": "54d80c25-93bb-4b59-9a69-987261f5a07b",
              "parentUUID": "91b4a52e-cc95-42cf-854e-665045971303",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllLocalStorage() - get all data in localStorage for all origins",
              "timedOut": null,
              "duration": 600,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getalllocalstorage\ncy.get('.ls-btn').click();\n// getAllLocalStorage() yields a map of origins to localStorage values\ncy.getAllLocalStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if localStorage is set on them\n    'https://example.cypress.io': {\n      'prop1': 'red',\n      'prop2': 'blue',\n      'prop3': 'magenta'\n    }\n  });\n});",
              "err": {},
              "uuid": "7a1d8757-32a4-494e-b4a2-9eac4e429b26",
              "parentUUID": "91b4a52e-cc95-42cf-854e-665045971303",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllLocalStorage() - clear all data in localStorage for all origins",
              "timedOut": null,
              "duration": 356,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearalllocalstorage\ncy.get('.ls-btn').click();\n// clearAllLocalStorage() yields null\ncy.clearAllLocalStorage();\ncy.getAllLocalStorage().should(() => {\n  expect(localStorage.getItem('prop1')).to.be.null;\n  expect(localStorage.getItem('prop2')).to.be.null;\n  expect(localStorage.getItem('prop3')).to.be.null;\n});",
              "err": {},
              "uuid": "a0564b72-a75a-4ff0-9e6f-68d777b69775",
              "parentUUID": "91b4a52e-cc95-42cf-854e-665045971303",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.getAllSessionStorage() - get all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 2075,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/getallsessionstorage\ncy.get('.ls-btn').click();\n// getAllSessionStorage() yields a map of origins to sessionStorage values\ncy.getAllSessionStorage().should(storageMap => {\n  expect(storageMap).to.deep.equal({\n    // other origins will also be present if sessionStorage is set on them\n    'https://example.cypress.io': {\n      'prop4': 'cyan',\n      'prop5': 'yellow',\n      'prop6': 'black'\n    }\n  });\n});",
              "err": {},
              "uuid": "3ebcb3cf-d6c8-4848-a93f-3613d6814aa7",
              "parentUUID": "91b4a52e-cc95-42cf-854e-665045971303",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "fullTitle": "Local Storage / Session Storage cy.clearAllSessionStorage() - clear all data in sessionStorage for all origins",
              "timedOut": null,
              "duration": 706,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/clearallsessionstorage\ncy.get('.ls-btn').click();\n// clearAllSessionStorage() yields null\ncy.clearAllSessionStorage();\ncy.getAllSessionStorage().should(() => {\n  expect(sessionStorage.getItem('prop4')).to.be.null;\n  expect(sessionStorage.getItem('prop5')).to.be.null;\n  expect(sessionStorage.getItem('prop6')).to.be.null;\n});",
              "err": {},
              "uuid": "23f8303b-4d8b-4e21-b824-11a6727d77ef",
              "parentUUID": "91b4a52e-cc95-42cf-854e-665045971303",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "54d80c25-93bb-4b59-9a69-987261f5a07b",
            "7a1d8757-32a4-494e-b4a2-9eac4e429b26",
            "a0564b72-a75a-4ff0-9e6f-68d777b69775",
            "3ebcb3cf-d6c8-4848-a93f-3613d6814aa7",
            "23f8303b-4d8b-4e21-b824-11a6727d77ef"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4655,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "849a471c-b870-4c7d-891f-e98ae63d33e3",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\traversal.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
          "title": "Traversal",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": ".children() - get child DOM elements",
              "fullTitle": "Traversal .children() - get child DOM elements",
              "timedOut": null,
              "duration": 5476,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/children\ncy.get('.traversal-breadcrumb').children('.active').should('contain', 'Data');",
              "err": {},
              "uuid": "b148c90c-f3a1-4b0d-8447-3b8b7508dd96",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".closest() - get closest ancestor DOM element",
              "fullTitle": "Traversal .closest() - get closest ancestor DOM element",
              "timedOut": null,
              "duration": 247,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/closest\ncy.get('.traversal-badge').closest('ul').should('have.class', 'list-group');",
              "err": {},
              "uuid": "34430b10-2acd-495f-926b-5902aedb0140",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".eq() - get a DOM element at a specific index",
              "fullTitle": "Traversal .eq() - get a DOM element at a specific index",
              "timedOut": null,
              "duration": 254,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/eq\ncy.get('.traversal-list>li').eq(1).should('contain', 'siamese');",
              "err": {},
              "uuid": "d9ba3571-4e4c-4aae-a4dd-7d8fd743dc80",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".filter() - get DOM elements that match the selector",
              "fullTitle": "Traversal .filter() - get DOM elements that match the selector",
              "timedOut": null,
              "duration": 362,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/filter\ncy.get('.traversal-nav>li').filter('.active').should('contain', 'About');",
              "err": {},
              "uuid": "fb434bd3-cb1f-4134-aaad-3e7a5b774098",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".find() - get descendant DOM elements of the selector",
              "fullTitle": "Traversal .find() - get descendant DOM elements of the selector",
              "timedOut": null,
              "duration": 669,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/find\ncy.get('.traversal-pagination').find('li').find('a').should('have.length', 7);",
              "err": {},
              "uuid": "bda4f351-4cc8-4dc2-9d32-f5859a568fcd",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".first() - get first DOM element",
              "fullTitle": "Traversal .first() - get first DOM element",
              "timedOut": null,
              "duration": 406,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/first\ncy.get('.traversal-table td').first().should('contain', '1');",
              "err": {},
              "uuid": "b092cc02-1417-431d-8d8e-b111f1eb888c",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".last() - get last DOM element",
              "fullTitle": "Traversal .last() - get last DOM element",
              "timedOut": null,
              "duration": 600,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/last\ncy.get('.traversal-buttons .btn').last().should('contain', 'Submit');",
              "err": {},
              "uuid": "b725e4d7-405b-4bea-92a8-40d98d906ce5",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".next() - get next sibling DOM element",
              "fullTitle": "Traversal .next() - get next sibling DOM element",
              "timedOut": null,
              "duration": 255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/next\ncy.get('.traversal-ul').contains('apples').next().should('contain', 'oranges');",
              "err": {},
              "uuid": "7d660a3f-8db9-4b90-b958-06c24d2d1ba6",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextAll() - get all next sibling DOM elements",
              "fullTitle": "Traversal .nextAll() - get all next sibling DOM elements",
              "timedOut": null,
              "duration": 1085,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextall\ncy.get('.traversal-next-all').contains('oranges').nextAll().should('have.length', 3);",
              "err": {},
              "uuid": "d9e599dc-f101-4892-9974-5f17b2535f2b",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".nextUntil() - get next sibling DOM elements until next el",
              "fullTitle": "Traversal .nextUntil() - get next sibling DOM elements until next el",
              "timedOut": null,
              "duration": 313,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/nextuntil\ncy.get('#veggies').nextUntil('#nuts').should('have.length', 3);",
              "err": {},
              "uuid": "371fbf0f-3c9f-4de1-8967-2d426caaf9ba",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".not() - remove DOM elements from set of DOM elements",
              "fullTitle": "Traversal .not() - remove DOM elements from set of DOM elements",
              "timedOut": null,
              "duration": 239,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/not\ncy.get('.traversal-disabled .btn').not('[disabled]').should('not.contain', 'Disabled');",
              "err": {},
              "uuid": "e0d0b27d-33bf-46a7-b090-a1827b8ed348",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parent() - get parent DOM element from DOM elements",
              "fullTitle": "Traversal .parent() - get parent DOM element from DOM elements",
              "timedOut": null,
              "duration": 213,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parent\ncy.get('.traversal-mark').parent().should('contain', 'Morbi leo risus');",
              "err": {},
              "uuid": "9dda463f-7e21-475c-8a48-4a8956a5f120",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parents() - get parent DOM elements from DOM elements",
              "fullTitle": "Traversal .parents() - get parent DOM elements from DOM elements",
              "timedOut": null,
              "duration": 232,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parents\ncy.get('.traversal-cite').parents().should('match', 'blockquote');",
              "err": {},
              "uuid": "cb2fd8e8-9989-4565-886f-bb48e65bcf54",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".parentsUntil() - get parent DOM elements from DOM elements until el",
              "fullTitle": "Traversal .parentsUntil() - get parent DOM elements from DOM elements until el",
              "timedOut": null,
              "duration": 250,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/parentsuntil\ncy.get('.clothes-nav').find('.active').parentsUntil('.clothes-nav').should('have.length', 2);",
              "err": {},
              "uuid": "9c6e61e1-cf2f-40fc-b950-e680f4ac883b",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prev() - get previous sibling DOM element",
              "fullTitle": "Traversal .prev() - get previous sibling DOM element",
              "timedOut": null,
              "duration": 585,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prev\ncy.get('.birds').find('.active').prev().should('contain', 'Lorikeets');",
              "err": {},
              "uuid": "44f05131-4fde-490d-84bf-dd66a10da99b",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevAll() - get all previous sibling DOM elements",
              "fullTitle": "Traversal .prevAll() - get all previous sibling DOM elements",
              "timedOut": null,
              "duration": 307,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevall\ncy.get('.fruits-list').find('.third').prevAll().should('have.length', 2);",
              "err": {},
              "uuid": "4e2c01e1-4fc4-432a-b6ea-9f2228e9c724",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".prevUntil() - get all previous sibling DOM elements until el",
              "fullTitle": "Traversal .prevUntil() - get all previous sibling DOM elements until el",
              "timedOut": null,
              "duration": 248,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/prevuntil\ncy.get('.foods-list').find('#nuts').prevUntil('#veggies').should('have.length', 3);",
              "err": {},
              "uuid": "76b25d5a-8fbd-446e-9dab-f417f10aeba8",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": ".siblings() - get all sibling DOM elements",
              "fullTitle": "Traversal .siblings() - get all sibling DOM elements",
              "timedOut": null,
              "duration": 254,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/siblings\ncy.get('.traversal-pills .active').siblings().should('have.length', 2);",
              "err": {},
              "uuid": "46c74235-84a8-4596-acf3-d94fc3e32880",
              "parentUUID": "35fe888c-9d74-405d-8ee2-e55c023f37a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b148c90c-f3a1-4b0d-8447-3b8b7508dd96",
            "34430b10-2acd-495f-926b-5902aedb0140",
            "d9ba3571-4e4c-4aae-a4dd-7d8fd743dc80",
            "fb434bd3-cb1f-4134-aaad-3e7a5b774098",
            "bda4f351-4cc8-4dc2-9d32-f5859a568fcd",
            "b092cc02-1417-431d-8d8e-b111f1eb888c",
            "b725e4d7-405b-4bea-92a8-40d98d906ce5",
            "7d660a3f-8db9-4b90-b958-06c24d2d1ba6",
            "d9e599dc-f101-4892-9974-5f17b2535f2b",
            "371fbf0f-3c9f-4de1-8967-2d426caaf9ba",
            "e0d0b27d-33bf-46a7-b090-a1827b8ed348",
            "9dda463f-7e21-475c-8a48-4a8956a5f120",
            "cb2fd8e8-9989-4565-886f-bb48e65bcf54",
            "9c6e61e1-cf2f-40fc-b950-e680f4ac883b",
            "44f05131-4fde-490d-84bf-dd66a10da99b",
            "4e2c01e1-4fc4-432a-b6ea-9f2228e9c724",
            "76b25d5a-8fbd-446e-9dab-f417f10aeba8",
            "46c74235-84a8-4596-acf3-d94fc3e32880"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11995,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "d3256103-66b9-43e7-a150-283e315917c9",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\utilities.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "de46d109-d4df-4d6e-8169-bd3ba79c21ae",
          "title": "Utilities",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Cypress._ - call a lodash method",
              "fullTitle": "Utilities Cypress._ - call a lodash method",
              "timedOut": null,
              "duration": 2262,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/_\ncy.request('https://jsonplaceholder.cypress.io/users').then(response => {\n  let ids = Cypress._.chain(response.body).map('id').take(3).value();\n  expect(ids).to.deep.eq([1, 2, 3]);\n});",
              "err": {},
              "uuid": "7366a5f6-e723-423c-b3da-9f1c7d662b7b",
              "parentUUID": "de46d109-d4df-4d6e-8169-bd3ba79c21ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.$ - call a jQuery method",
              "fullTitle": "Utilities Cypress.$ - call a jQuery method",
              "timedOut": null,
              "duration": 454,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/$\nlet $li = Cypress.$('.utility-jquery li:first');\ncy.wrap($li).should('not.have.class', 'active');\ncy.wrap($li).click();\ncy.wrap($li).should('have.class', 'active');",
              "err": {},
              "uuid": "8b2a1a4c-374f-4613-a4f2-3b39ac8a2642",
              "parentUUID": "de46d109-d4df-4d6e-8169-bd3ba79c21ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Blob - blob utilities and base64 string conversion",
              "fullTitle": "Utilities Cypress.Blob - blob utilities and base64 string conversion",
              "timedOut": null,
              "duration": 1076,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/blob\ncy.get('.utility-blob').then($div => {\n  // https://github.com/nolanlawson/blob-util#imgSrcToDataURL\n  // get the dataUrl string for the javascript-logo\n  return Cypress.Blob.imgSrcToDataURL('https://example.cypress.io/assets/img/javascript-logo.png', undefined, 'anonymous').then(dataUrl => {\n    // create an <img> element and set its src to the dataUrl\n    let img = Cypress.$('<img />', {\n      src: dataUrl\n    });\n    // need to explicitly return cy here since we are initially returning\n    // the Cypress.Blob.imgSrcToDataURL promise to our test\n    // append the image\n    $div.append(img);\n    cy.get('.utility-blob img').click();\n    cy.get('.utility-blob img').should('have.attr', 'src', dataUrl);\n  });\n});",
              "err": {},
              "uuid": "1b8dd548-adab-4e28-b277-c73b00f4db63",
              "parentUUID": "de46d109-d4df-4d6e-8169-bd3ba79c21ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.minimatch - test out glob patterns against strings",
              "fullTitle": "Utilities Cypress.minimatch - test out glob patterns against strings",
              "timedOut": null,
              "duration": 203,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/minimatch\nlet matching = Cypress.minimatch('/users/1/comments', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'matching wildcard').to.be.true;\nmatching = Cypress.minimatch('/users/1/comments/2', '/users/*/comments', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.false;\n// ** matches against all downstream path segments\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/**', {\n  matchBase: true\n});\nexpect(matching, 'comments').to.be.true;\n// whereas * matches only the next path segment\nmatching = Cypress.minimatch('/foo/bar/baz/123/quux?a=b&c=2', '/foo/*', {\n  matchBase: false\n});\nexpect(matching, 'comments').to.be.false;",
              "err": {},
              "uuid": "9b98f3db-6023-4f20-afc0-90e702b1d4fc",
              "parentUUID": "de46d109-d4df-4d6e-8169-bd3ba79c21ae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Cypress.Promise - instantiate a bluebird promise",
              "fullTitle": "Utilities Cypress.Promise - instantiate a bluebird promise",
              "timedOut": null,
              "duration": 1292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/promise\nlet waited = false;\n/**\n * @return Bluebird<string>\n */\nfunction waitOneSecond() {\n  // return a promise that resolves after 1 second\n  return new Cypress.Promise((resolve, reject) => {\n    setTimeout(() => {\n      // set waited to true\n      waited = true;\n      // resolve with 'foo' string\n      resolve('foo');\n    }, 1000);\n  });\n}\ncy.then(() => {\n  // return a promise to cy.then() that\n  // is awaited until it resolves\n  return waitOneSecond().then(str => {\n    expect(str).to.eq('foo');\n    expect(waited).to.be.true;\n  });\n});",
              "err": {},
              "uuid": "14063251-a24b-4b73-bfb3-e4d1e1fca003",
              "parentUUID": "de46d109-d4df-4d6e-8169-bd3ba79c21ae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7366a5f6-e723-423c-b3da-9f1c7d662b7b",
            "8b2a1a4c-374f-4613-a4f2-3b39ac8a2642",
            "1b8dd548-adab-4e28-b277-c73b00f4db63",
            "9b98f3db-6023-4f20-afc0-90e702b1d4fc",
            "14063251-a24b-4b73-bfb3-e4d1e1fca003"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5287,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "64e34e06-ff91-4bd4-aa9e-dae537a0ba24",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\viewport.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8fd95721-b5f4-42c6-9e44-1d13ade178e0",
          "title": "Viewport",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.viewport() - set the viewport size and dimension",
              "fullTitle": "Viewport cy.viewport() - set the viewport size and dimension",
              "timedOut": null,
              "duration": 4711,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/viewport\ncy.get('#navbar').should('be.visible');\ncy.viewport(320, 480);\n// the navbar should have collapse since our screen is smaller\ncy.get('#navbar').should('not.be.visible');\ncy.get('.navbar-toggle').should('be.visible').click();\ncy.get('.nav').find('a').should('be.visible');\n// lets see what our app looks like on a super large screen\ncy.viewport(2999, 2999);\n// cy.viewport() accepts a set of preset sizes\n// to easily set the screen to a device's width and height\n// We added a cy.wait() between each viewport change so you can see\n// the change otherwise it is a little too fast to see :)\ncy.viewport('macbook-15');\ncy.wait(200);\ncy.viewport('macbook-13');\ncy.wait(200);\ncy.viewport('macbook-11');\ncy.wait(200);\ncy.viewport('ipad-2');\ncy.wait(200);\ncy.viewport('ipad-mini');\ncy.wait(200);\ncy.viewport('iphone-6+');\ncy.wait(200);\ncy.viewport('iphone-6');\ncy.wait(200);\ncy.viewport('iphone-5');\ncy.wait(200);\ncy.viewport('iphone-4');\ncy.wait(200);\ncy.viewport('iphone-3');\ncy.wait(200);\n// cy.viewport() accepts an orientation for all presets\n// the default orientation is 'portrait'\ncy.viewport('ipad-2', 'portrait');\ncy.wait(200);\ncy.viewport('iphone-4', 'landscape');\ncy.wait(200);\n// The viewport will be reset back to the default dimensions\n// in between tests (the  default can be set in cypress.config.{js|ts})",
              "err": {},
              "uuid": "0951391e-1331-4d25-af5a-07f587f82362",
              "parentUUID": "8fd95721-b5f4-42c6-9e44-1d13ade178e0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0951391e-1331-4d25-af5a-07f587f82362"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4711,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "546b1dfd-f864-4588-ae62-de5a08ff96da",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\waiting.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7d102724-8875-4c79-a3cf-10de6e44814e",
          "title": "Waiting",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.wait() - wait for a specific amount of time",
              "fullTitle": "Waiting cy.wait() - wait for a specific amount of time",
              "timedOut": null,
              "duration": 5440,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('.wait-input1').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input2').type('Wait 1000ms after typing');\ncy.wait(1000);\ncy.get('.wait-input3').type('Wait 1000ms after typing');\ncy.wait(1000);",
              "err": {},
              "uuid": "d02ca360-a37d-4254-ba66-d41a9d31a149",
              "parentUUID": "7d102724-8875-4c79-a3cf-10de6e44814e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.wait() - wait for a specific route",
              "fullTitle": "Waiting cy.wait() - wait for a specific route",
              "timedOut": null,
              "duration": 1988,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Listen to GET to comments/1\ncy.intercept('GET', '**/comments/*').as('getComment');\n// we have code that gets a comment when\n// the button is clicked in scripts.js\ncy.get('.network-btn').click();\n// wait for GET comments/1\ncy.wait('@getComment').its('response.statusCode').should('be.oneOf', [200, 304]);",
              "err": {},
              "uuid": "7382be6c-fe28-4dfa-9a28-e3928a285a56",
              "parentUUID": "7d102724-8875-4c79-a3cf-10de6e44814e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d02ca360-a37d-4254-ba66-d41a9d31a149",
            "7382be6c-fe28-4dfa-9a28-e3928a285a56"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7428,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "1f734e0b-6273-4d52-ab3d-4c4a2a309b79",
      "title": "",
      "fullFile": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "file": "cypress\\e2e\\2-advanced-examples\\window.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "690cd2d4-74ac-4a14-9a62-622d06e1e17a",
          "title": "Window",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "cy.window() - get the global window object",
              "fullTitle": "Window cy.window() - get the global window object",
              "timedOut": null,
              "duration": 599,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/window\ncy.window().should('have.property', 'top');",
              "err": {},
              "uuid": "44d35929-a9fe-4f11-8676-59e09fb05479",
              "parentUUID": "690cd2d4-74ac-4a14-9a62-622d06e1e17a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.document() - get the document object",
              "fullTitle": "Window cy.document() - get the document object",
              "timedOut": null,
              "duration": 187,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/document\ncy.document().should('have.property', 'charset').and('eq', 'UTF-8');",
              "err": {},
              "uuid": "55036722-9629-4ce2-8dfd-e1cb2f6fdb23",
              "parentUUID": "690cd2d4-74ac-4a14-9a62-622d06e1e17a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "cy.title() - get the title",
              "fullTitle": "Window cy.title() - get the title",
              "timedOut": null,
              "duration": 206,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// https://on.cypress.io/title\ncy.title().should('include', 'Kitchen Sink');",
              "err": {},
              "uuid": "abfe6427-db53-4644-b2c5-a56f1e921c01",
              "parentUUID": "690cd2d4-74ac-4a14-9a62-622d06e1e17a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "44d35929-a9fe-4f11-8676-59e09fb05479",
            "55036722-9629-4ce2-8dfd-e1cb2f6fdb23",
            "abfe6427-db53-4644-b2c5-a56f1e921c01"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 992,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a0a1bf86-1322-474d-a945-81f3b68fa322",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.login.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.login.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d73053c6-a19b-4fd8-8282-5295fb6ebc71",
          "title": "API login test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should successfully log in with valid credentials",
              "fullTitle": "API login test should successfully log in with valid credentials",
              "timedOut": null,
              "duration": 12624,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/login`,\n  body: {\n    username: Cypress.env(\"username\"),\n    password: Cypress.env(\"password\")\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(200);\n});",
              "err": {},
              "uuid": "5c872bb6-0e3f-41cf-8fbd-0e362a09866c",
              "parentUUID": "d73053c6-a19b-4fd8-8282-5295fb6ebc71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should fail to log in with invalid credentials",
              "fullTitle": "API login test should fail to log in with invalid credentials",
              "timedOut": null,
              "duration": 1075,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/login`,\n  body: {\n    username: \"invalid@test.fr\",\n    password: \"wrongpassword\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "5ad3acc3-8be1-4da1-9f83-c043697e2fee",
              "parentUUID": "d73053c6-a19b-4fd8-8282-5295fb6ebc71",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error for missing credentials",
              "fullTitle": "API login test should return an error for missing credentials",
              "timedOut": null,
              "duration": 5620,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/login`,\n  body: {},\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(400);\n});",
              "err": {},
              "uuid": "43a8ddbd-885c-494f-ae7e-7287a96fe828",
              "parentUUID": "d73053c6-a19b-4fd8-8282-5295fb6ebc71",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5c872bb6-0e3f-41cf-8fbd-0e362a09866c",
            "5ad3acc3-8be1-4da1-9f83-c043697e2fee",
            "43a8ddbd-885c-494f-ae7e-7287a96fe828"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19319,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "8abe9824-140e-42fd-a4a2-d8885fdca53b",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.orders.add.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.orders.add.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4e542398-1e7c-4b1b-9ccc-91e3152547b1",
          "title": "API add product to cart test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add an available product to the cart",
              "fullTitle": "API add product to cart test should add an available product to the cart",
              "timedOut": null,
              "duration": 35195,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authToken = localStorage.getItem(\"user\");\ncy.request({\n  method: \"PUT\",\n  url: `${UrlApi}/orders/add`,\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  },\n  body: {\n    product: 5,\n    // ID of an available product\n    quantity: 1\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); // (OK)\n  cy.visit(\"/cart\");\n  cy.wait(2000);\n  cy.get('[data-cy=\"cart-line\"]').should(\"have.length.at.least\", 1); // Verify if there is at least 1 product in the cart\n});",
              "err": {},
              "uuid": "05cc469d-84c6-4a21-bd22-e910c48cef99",
              "parentUUID": "4e542398-1e7c-4b1b-9ccc-91e3152547b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when adding an out-of-stock product to the cart",
              "fullTitle": "API add product to cart test should return an error when adding an out-of-stock product to the cart",
              "timedOut": null,
              "duration": 1662,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const authToken = localStorage.getItem(\"user\");\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products/3`,\n  // product ID\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  const productStock = response.body.availableStock;\n  expect(productStock).to.be.a(\"number\").and.to.be.greaterThan(0);\n  const requestedQuantity = productStock + 1;\n  cy.request({\n    method: \"PUT\",\n    url: `${UrlApi}/orders/add`,\n    headers: {\n      Authorization: `Bearer ${authToken}`\n    },\n    body: {\n      product: 3,\n      // product ID\n      quantity: requestedQuantity\n    },\n    failOnStatusCode: false\n  }).then(response => {\n    expect(response.status).to.eq(400); // Bad request\n    expect(response.body).to.have.property(\"error\");\n    cy.visit(\"/cart\");\n    cy.get('[data-cy=\"cart-line\"]').should(\"have.length\", 0); // 0 products in the cart\n  });\n});",
              "err": {
                "message": "AssertionError: expected -11 to be above +0",
                "estack": "AssertionError: expected -11 to be above +0\n    at Context.eval (webpack:///./cypress/support/commands.js:22:4)",
                "diff": null
              },
              "uuid": "10d73c15-571b-49d7-af5c-0f93fe5b1243",
              "parentUUID": "4e542398-1e7c-4b1b-9ccc-91e3152547b1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an error when not authenticated",
              "fullTitle": "API add product to cart test should return an error when not authenticated",
              "timedOut": null,
              "duration": 1368,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.logout();\ncy.request({\n  method: \"PUT\",\n  url: `${UrlApi}/orders/add`,\n  body: {\n    product: 1,\n    quantity: 2\n  },\n  failOnStatusCode: false,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(401); // Unauthorized\n});",
              "err": {},
              "uuid": "9d803227-fcfd-4563-905a-0ee3bb2edb05",
              "parentUUID": "4e542398-1e7c-4b1b-9ccc-91e3152547b1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "05cc469d-84c6-4a21-bd22-e910c48cef99",
            "9d803227-fcfd-4563-905a-0ee3bb2edb05"
          ],
          "failures": [
            "10d73c15-571b-49d7-af5c-0f93fe5b1243"
          ],
          "pending": [],
          "skipped": [],
          "duration": 38225,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3dd3dffe-9544-4897-bc7a-5575649f1102",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.orders.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.orders.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "46442389-a237-4a9a-9370-b26b86927202",
          "title": "API orders test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should display the list of products from the cart",
              "fullTitle": "API orders test should display the list of products from the cart",
              "timedOut": null,
              "duration": 1569,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authToken = localStorage.getItem(\"user\");\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/orders`,\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"object\");\n  expect(response.body).to.have.property(\"orderLines\");\n  expect(response.body.orderLines).to.be.an(\"array\");\n});",
              "err": {},
              "uuid": "c5d260cb-d93e-4b04-aec7-a3fd0f7a2574",
              "parentUUID": "46442389-a237-4a9a-9370-b26b86927202",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not display the list of products from the cart if not authenticated",
              "fullTitle": "API orders test should not display the list of products from the cart if not authenticated",
              "timedOut": null,
              "duration": 1542,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.logout();\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/orders`,\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403); // Should be 403 (Forbidden), but returns 401 (Unauthorized)\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 403",
                "estack": "AssertionError: expected 401 to equal 403\n    at Context.eval (webpack:///./cypress/support/commands.js:22:4)",
                "diff": "- 401\n+ 403\n"
              },
              "uuid": "a8bd188e-8481-4b28-9873-69a3b45c0d5f",
              "parentUUID": "46442389-a237-4a9a-9370-b26b86927202",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a forbidden error when not authorized to view the products from the cart",
              "fullTitle": "API orders test should return a forbidden error when not authorized to view the products from the cart",
              "timedOut": null,
              "duration": 1557,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authToken = \"invalid_token\";\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/orders`,\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401); // 401 (Unauthorized) vs 403 (Forbidden)\n});",
              "err": {},
              "uuid": "7267ead2-210b-4cee-a274-fa3f9e34f7b9",
              "parentUUID": "46442389-a237-4a9a-9370-b26b86927202",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c5d260cb-d93e-4b04-aec7-a3fd0f7a2574",
            "7267ead2-210b-4cee-a274-fa3f9e34f7b9"
          ],
          "failures": [
            "a8bd188e-8481-4b28-9873-69a3b45c0d5f"
          ],
          "pending": [],
          "skipped": [],
          "duration": 4668,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "cdfb2529-ce39-44c0-850c-0b7c5d16bb4b",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.products.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.products.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6e7a1c17-bb02-4d34-a5f9-bf92ff70f7fd",
          "title": "API get products test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve the list of products",
              "fullTitle": "API get products test should retrieve the list of products",
              "timedOut": null,
              "duration": 1699,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products`,\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"user\")}`,\n    \"Content-Type\": \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  response.body.forEach(product => {\n    expect(product).to.have.property(\"id\");\n    expect(product).to.have.property(\"name\").that.is.a(\"string\");\n    expect(product).to.have.property(\"availableStock\").that.is.a(\"number\");\n    expect(product).to.have.property(\"skin\").that.is.a(\"string\");\n    expect(product).to.have.property(\"aromas\").that.is.a(\"string\");\n    expect(product).to.have.property(\"ingredients\").that.is.a(\"string\");\n    expect(product).to.have.property(\"description\").that.is.a(\"string\");\n    expect(product).to.have.property(\"price\").that.is.a(\"number\");\n    expect(product).to.have.property(\"picture\").that.is.a(\"string\");\n    expect(product).to.have.property(\"varieties\").that.is.a(\"number\");\n  });\n});",
              "err": {},
              "uuid": "60d262f3-9a3e-46dc-9276-e73e9272ebc7",
              "parentUUID": "6e7a1c17-bb02-4d34-a5f9-bf92ff70f7fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve product details by ID",
              "fullTitle": "API get products test should retrieve product details by ID",
              "timedOut": null,
              "duration": 1306,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productId = 3;\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products/${productId}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"object\");\n  expect(response.body).to.have.property(\"id\").that.is.a(\"number\");\n  expect(response.body).to.have.property(\"name\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"availableStock\").that.is.a(\"number\");\n  expect(response.body).to.have.property(\"skin\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"aromas\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"ingredients\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"description\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"price\").that.is.a(\"number\");\n  expect(response.body).to.have.property(\"picture\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"varieties\").that.is.a(\"number\");\n});",
              "err": {},
              "uuid": "cb5e3475-c9c1-4ca4-850d-bbb9ea2c1bc6",
              "parentUUID": "6e7a1c17-bb02-4d34-a5f9-bf92ff70f7fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent product ID",
              "fullTitle": "API get products test should return 404 for non-existent product ID",
              "timedOut": null,
              "duration": 1634,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentId = 9999;\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products/${nonExistentId}`,\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"user\")}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "2b8feb30-3fe6-4772-b3db-f5085ba4b513",
              "parentUUID": "6e7a1c17-bb02-4d34-a5f9-bf92ff70f7fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60d262f3-9a3e-46dc-9276-e73e9272ebc7",
            "cb5e3475-c9c1-4ca4-850d-bbb9ea2c1bc6",
            "2b8feb30-3fe6-4772-b3db-f5085ba4b513"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4639,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "bf63cc14-b5fb-49b0-9c3e-b4cc87982232",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.reviews.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.reviews.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
          "title": "API reviews test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get existing reviews",
              "fullTitle": "API reviews test should get existing reviews",
              "timedOut": null,
              "duration": 3884,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: `${UrlApi}/reviews`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n});",
              "err": {},
              "uuid": "5f9da696-f0c2-456e-9083-24884851aab7",
              "parentUUID": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should add a new review",
              "fullTitle": "API reviews test should add a new review",
              "timedOut": null,
              "duration": 1812,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authToken = localStorage.getItem(\"user\");\ncy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  headers: {\n    Authorization: `Bearer ${authToken}`\n  },\n  body: {\n    title: \"Super\",\n    comment: \"Je l'aime bien, j'achèterai à nouveau !\",\n    rating: 5\n  }\n}).then(response => {\n  expect(response.status).to.eq(200); //201 the server has successfully processed the request, the new resource has been created\n  expect(response.body).to.have.property(\"id\");\n  expect(response.body.title).to.eq(\"Super\");\n  expect(response.body.comment).to.eq(\"Je l'aime bien, j'achèterai à nouveau !\");\n  expect(response.body.rating).to.eq(5);\n});",
              "err": {},
              "uuid": "06b43ba0-202b-4962-9154-07bfc03dbbfe",
              "parentUUID": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate review rating between 1 and 5",
              "fullTitle": "API reviews test should validate review rating between 1 and 5",
              "timedOut": null,
              "duration": 1213,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"Invalid Rating\",\n    comment: \"This rating is invalid\",\n    rating: 6\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "eaeadd3c-05e7-44d9-99db-a5b1a23652ea",
              "parentUUID": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review without rating",
              "fullTitle": "API reviews test should not add review without rating",
              "timedOut": null,
              "duration": 1412,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"Title without rating\",\n    comment: \"Comment without rating\"\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "255ba13c-8643-415a-b86c-db0176b6c829",
              "parentUUID": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review without title",
              "fullTitle": "API reviews test should not add review without title",
              "timedOut": null,
              "duration": 1950,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    comment: \"Comment without title\",\n    rating: 4\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "08072c34-1fc0-4e31-93fb-701fd3cbdeae",
              "parentUUID": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review without comment",
              "fullTitle": "API reviews test should not add review without comment",
              "timedOut": null,
              "duration": 1574,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"Title without comment\",\n    rating: 3\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "692a48a6-8406-43f1-98be-872c1cf5a44d",
              "parentUUID": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review with title longer than allowed",
              "fullTitle": "API reviews test should not add review with title longer than allowed",
              "timedOut": null,
              "duration": 1576,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const longTitle = \"a\".repeat(256); // Exemple of title longer than 100 characters\ncy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: longTitle,\n    comment: \"Valid comment\",\n    rating: 3\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "69e95aad-b74c-461b-a44d-0562b7e4acca",
              "parentUUID": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not add review with comment longer than allowed",
              "fullTitle": "API reviews test should not add review with comment longer than allowed",
              "timedOut": null,
              "duration": 1834,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const longComment = \"a\".repeat(501); // Exemple of comment longer than 500 characters\ncy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"Valid title\",\n    comment: longComment,\n    rating: 3\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(401);\n});",
              "err": {},
              "uuid": "10b3ecf1-01c6-4c23-b7d5-d9e4c6984120",
              "parentUUID": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should not allow script tags in review comments (XSS Test)",
              "fullTitle": "API reviews test should not allow script tags in review comments (XSS Test)",
              "timedOut": null,
              "duration": 3227,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const xssScriptComment = \"<script>alert('XSS Attack');</script>\";\ncy.request({\n  method: \"POST\",\n  url: `${UrlApi}/reviews`,\n  body: {\n    title: \"XSS Test\",\n    comment: xssScriptComment,\n    rating: 3\n  },\n  headers: {\n    \"Content-Type\": \"application/json\"\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(403); //403 Forbidden\n});",
              "err": {
                "message": "AssertionError: expected 401 to equal 403",
                "estack": "AssertionError: expected 401 to equal 403\n    at Context.eval (webpack:///./cypress/support/commands.js:22:4)",
                "diff": "- 401\n+ 403\n"
              },
              "uuid": "7c108c3b-9fdc-4ca2-a912-91881644c778",
              "parentUUID": "a3979c1a-6c74-48fb-a207-76e3cd2bef38",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f9da696-f0c2-456e-9083-24884851aab7",
            "06b43ba0-202b-4962-9154-07bfc03dbbfe",
            "eaeadd3c-05e7-44d9-99db-a5b1a23652ea",
            "255ba13c-8643-415a-b86c-db0176b6c829",
            "08072c34-1fc0-4e31-93fb-701fd3cbdeae",
            "692a48a6-8406-43f1-98be-872c1cf5a44d",
            "69e95aad-b74c-461b-a44d-0562b7e4acca",
            "10b3ecf1-01c6-4c23-b7d5-d9e4c6984120"
          ],
          "failures": [
            "7c108c3b-9fdc-4ca2-a912-91881644c778"
          ],
          "pending": [],
          "skipped": [],
          "duration": 18482,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "fa502bcd-1fed-4047-9d44-a1f62e1ff9e4",
      "title": "",
      "fullFile": "cypress\\e2e\\4-smoke-tests\\smoketests.cy.js",
      "file": "cypress\\e2e\\4-smoke-tests\\smoketests.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6b46449c-c22c-4dd4-846c-986f20fca995",
          "title": "Smoke Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify the presence of login fields and buttons",
              "fullTitle": "Smoke Tests should verify the presence of login fields and buttons",
              "timedOut": null,
              "duration": 4112,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/login\");\ncy.url().should(\"include\", \"/login\");\ncy.contains(\"Email\");\ncy.contains(\"Mot de passe\");\ncy.get('[data-cy=\"login-submit\"]').should(\"exist\");",
              "err": {},
              "uuid": "8e573ab0-4ee0-44b6-a4d0-52f18b1b9a28",
              "parentUUID": "6b46449c-c22c-4dd4-846c-986f20fca995",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "c42c2c53-a77e-41b5-8510-5e6f7e1bdde2",
              "title": "when authenticated",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should verify the presence of add to cart buttons when logged in",
                  "fullTitle": "Smoke Tests when authenticated should verify the presence of add to cart buttons when logged in",
                  "timedOut": null,
                  "duration": 17212,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/products\");\ncy.url().should(\"include\", \"/products\");\n// Verify if product list is loaded\ncy.get(\".list-products .mini-product\").should(\"have.length.greaterThan\", 0);\ncy.get(\".list-products .mini-product\").each(($el, index, $list) => {\n  // cy.wrap($el).contains(\"Ajouter au panier\").should(\"be.visible\");\n  // cy.wrap($el).find('[data-cy=\"product-link\"]').should(\"exist\");\n  cy.wrap($el);\n  // .find('.add-to-cart [data-cy=\"product-link\"]')\n  cy.get('.add-to-cart button[data-cy=\"product-link\"]').first().click();\n  cy.url().should(\"include\", \"/products/\");\n  cy.contains(\"Ajouter au panier\").should(\"be.visible\");\n  // Navigate back to products list to check the next product\n  if (index < $list.length - 1) {\n    cy.go(\"back\");\n    cy.wait(1000); // Wait a moment to ensure the page has navigated back\n  }\n});",
                  "err": {},
                  "uuid": "1cb7aef0-fb36-4c89-b5cd-6bbfa4a058a2",
                  "parentUUID": "c42c2c53-a77e-41b5-8510-5e6f7e1bdde2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should verify the presence of product availability field",
                  "fullTitle": "Smoke Tests when authenticated should verify the presence of product availability field",
                  "timedOut": null,
                  "duration": 23992,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "cy.visit(\"/products\");\ncy.url().should(\"include\", \"/products\");\ncy.get(\".list-products .mini-product\").each(($el, index, $list) => {\n  cy.wrap($el);\n  cy.get('.add-to-cart button[data-cy=\"product-link\"]').first().click();\n  cy.url().should(\"include\", \"/products/\");\n  cy.get(\".stock\").should(\"exist\");\n  // Navigate back to products list to check the next product\n  if (index < $list.length - 1) {\n    cy.go(\"back\");\n    cy.wait(1000); // Wait a moment to ensure the page has navigated back\n  }\n});",
                  "err": {},
                  "uuid": "d4ec1b5e-e670-485a-b155-9003675fb3cc",
                  "parentUUID": "c42c2c53-a77e-41b5-8510-5e6f7e1bdde2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1cb7aef0-fb36-4c89-b5cd-6bbfa4a058a2",
                "d4ec1b5e-e670-485a-b155-9003675fb3cc"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 41204,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "8e573ab0-4ee0-44b6-a4d0-52f18b1b9a28"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4112,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "00928d44-ba66-4d33-b614-3f893332c63c",
      "title": "",
      "fullFile": "cypress\\e2e\\5-functional-tests\\connexion.cy.js",
      "file": "cypress\\e2e\\5-functional-tests\\connexion.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "662dc082-e212-493d-b114-143e4db6228c",
          "title": "Connexion Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log in successfully with valid credentials",
              "fullTitle": "Connexion Tests should log in successfully with valid credentials",
              "timedOut": null,
              "duration": 5677,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-cy=\"login-input-username\"]').type(Cypress.env(\"username\"), {\n  force: true\n});\ncy.get('[data-cy=\"login-input-password\"]').type(Cypress.env(\"password\"), {\n  force: true\n});\ncy.get('[data-cy=\"login-submit\"]').click();\ncy.visit(\"/\");\ncy.url().should(\"include\", \"/\");\n// cy.get(\"nav\").contains(\"Mon panier\").should(\"be.visible\");\ncy.get('[data-cy=\"nav-link-cart\"]').should(\"be.visible\");",
              "err": {},
              "uuid": "29e6886b-d040-42b1-9b19-89c306a9d45a",
              "parentUUID": "662dc082-e212-493d-b114-143e4db6228c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should display an error with invalid credentials",
              "fullTitle": "Connexion Tests should display an error with invalid credentials",
              "timedOut": null,
              "duration": 1433,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.get('[data-cy=\"login-input-username\"]').type(\"invalid@test.fr\", {\n  force: true\n});\ncy.get('[data-cy=\"login-input-password\"]').type(\"wrongpassword\", {\n  force: true\n});\ncy.get('[data-cy=\"login-submit\"]').click();\ncy.get('[data-cy=\"login-errors\"]').should(\"be.visible\");",
              "err": {},
              "uuid": "0549c499-0c98-4dc2-9515-49bdc6ab84bf",
              "parentUUID": "662dc082-e212-493d-b114-143e4db6228c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "29e6886b-d040-42b1-9b19-89c306a9d45a",
            "0549c499-0c98-4dc2-9515-49bdc6ab84bf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a6d86f08-42c9-43f5-9df7-a156d486654a",
      "title": "",
      "fullFile": "cypress\\e2e\\5-functional-tests\\panier.cy.js",
      "file": "cypress\\e2e\\5-functional-tests\\panier.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "977c5262-3825-45b0-8eee-23fb0af33fd4",
          "title": "Cart Tests",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a product to the cart",
              "fullTitle": "Cart Tests should add a product to the cart",
              "timedOut": null,
              "duration": 6783,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/products\");\ncy.get('.add-to-cart [data-cy=\"product-link\"]').first().click();\ncy.url().should(\"include\", \"/products/\");\ncy.get('[data-cy=\"detail-product-add\"]').should(\"be.visible\").click(); //Ajouter au panier\ncy.visit(\"/cart\");\ncy.get('[data-cy=\"cart-line\"]').should(\"have.length.greaterThan\", 0);",
              "err": {},
              "uuid": "e41ff324-9172-487e-a392-4e4d6202aa15",
              "parentUUID": "977c5262-3825-45b0-8eee-23fb0af33fd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should verify if the stock is reduced after adding to cart",
              "fullTitle": "Cart Tests should verify if the stock is reduced after adding to cart",
              "timedOut": null,
              "duration": 3319,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/products\");\ncy.get('.add-to-cart [data-cy=\"product-link\"]').first().click();\ncy.url().should(\"include\", \"/products/\");\ncy.get('[data-cy=\"detail-product-stock\"]').invoke(\"text\").then(availableStock => {\n  const initialStock = Number(availableStock.trim());\n  expect(initialStock).to.be.greaterThan(0);\n  cy.get('[data-cy=\"detail-product-add\"]').click();\n  // cy.visit(\"/products/{productId}\");\n  cy.url().should(\"include\", \"/products/\");\n  cy.get('[data-cy=\"product-stock\"]').invoke(\"text\").then(updatedStockNumber => {\n    const updatedStock = Number(updatedStockNumber.trim());\n    expect(updatedStock).to.eq(initialStock - 1); // Verify if stock was reduced\n  });\n});",
              "err": {
                "message": "AssertionError: expected NaN to be above +0",
                "estack": "AssertionError: expected NaN to be above +0\n    at Context.eval (webpack:///./cypress/e2e/5-functional-tests/panier.cy.js:23:7)",
                "diff": null
              },
              "uuid": "18e503f2-d242-46c9-9c43-8cb4f4af5e0d",
              "parentUUID": "977c5262-3825-45b0-8eee-23fb0af33fd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should handle invalid quantity inputs",
              "fullTitle": "Cart Tests should handle invalid quantity inputs",
              "timedOut": null,
              "duration": 13697,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/cart\");\ncy.get('[data-cy=\"cart-line\"]').first().find('[data-cy=\"cart-line-quantity\"]').clear().type(\"-5{enter}\");\n// cy.get('[data-cy=\"cart-line\"]')\n//   .first()\n//   .find('[data-cy=\"cart-line-quantity\"]')\n//   .should(\"have.value\", \"1\"); // Verify if the negative value was reset to 1\ncy.contains(\"This value should be 0 or more.\").should(\"be.visible\");\ncy.get('[data-cy=\"cart-line\"]').first().find('[data-cy=\"cart-line-quantity\"]').clear().type(\"1000{enter}\");\ncy.contains(\"This value is not valid.\").should(\"be.visible\"); // Check if an error message is displayed",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find content: 'This value should be 0 or more.' but never did.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find content: 'This value should be 0 or more.' but never did.\n    at Context.eval (webpack:///./cypress/e2e/5-functional-tests/panier.cy.js:49:51)",
                "diff": null
              },
              "uuid": "f17e714e-0146-4c2a-907b-1887ced61ccd",
              "parentUUID": "977c5262-3825-45b0-8eee-23fb0af33fd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should remove a product from the cart",
              "fullTitle": "Cart Tests should remove a product from the cart",
              "timedOut": null,
              "duration": 5311,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.visit(\"/cart\");\ncy.get('[data-cy=\"cart-line\"]').should(\"have.length.greaterThan\", 0);\ncy.get('[data-cy=\"cart-line-delete\"]').should(\"be.visible\").each($el => {\n  cy.wrap($el).click();\n});\ncy.get('[data-cy=\"cart-line\"]').should(\"have.length\", 0);",
              "err": {},
              "uuid": "ae56c58c-65af-43ce-90ba-9008f4bd0a97",
              "parentUUID": "977c5262-3825-45b0-8eee-23fb0af33fd4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e41ff324-9172-487e-a392-4e4d6202aa15",
            "ae56c58c-65af-43ce-90ba-9008f4bd0a97"
          ],
          "failures": [
            "18e503f2-d242-46c9-9c43-8cb4f4af5e0d",
            "f17e714e-0146-4c2a-907b-1887ced61ccd"
          ],
          "pending": [],
          "skipped": [],
          "duration": 29110,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "060757b6-80ec-4add-a2ee-2b277dd5af76",
      "title": "",
      "fullFile": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "file": "cypress\\e2e\\1-getting-started\\todo.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d99bc4e9-fa55-480c-814a-ad5198c755fa",
          "title": "example to-do app",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "displays two todo items by default",
              "fullTitle": "example to-do app displays two todo items by default",
              "timedOut": null,
              "duration": 2137,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We use the `cy.get()` command to get all elements that match the selector.\n// Then, we use `should` to assert that there are two matched items,\n// which are the two default items.\ncy.get('.todo-list li').should('have.length', 2);\n// We can go even further and check that the default todos each contain\n// the correct text. We use the `first` and `last` functions\n// to get just the first and last matched elements individually,\n// and then perform an assertion with `should`.\ncy.get('.todo-list li').first().should('have.text', 'Pay electric bill');\ncy.get('.todo-list li').last().should('have.text', 'Walk the dog');",
              "err": {},
              "uuid": "239ac92d-e52f-44a3-92ee-8e56d451040e",
              "parentUUID": "d99bc4e9-fa55-480c-814a-ad5198c755fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can add new todo items",
              "fullTitle": "example to-do app can add new todo items",
              "timedOut": null,
              "duration": 819,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// We'll store our item text in a variable so we can reuse it\nconst newItem = 'Feed the cat';\n// Let's get the input element and use the `type` command to\n// input our new list item. After typing the content of our item,\n// we need to type the enter key as well in order to submit the input.\n// This input has a data-test attribute so we'll use that to select the\n// element in accordance with best practices:\n// https://on.cypress.io/selecting-elements\ncy.get('[data-test=new-todo]').type(`${newItem}{enter}`);\n// Now that we've typed our new item, let's check that it actually was added to the list.\n// Since it's the newest item, it should exist as the last element in the list.\n// In addition, with the two default items, we should have a total of 3 elements in the list.\n// Since assertions yield the element that was asserted on,\n// we can chain both of these assertions together into a single statement.\ncy.get('.todo-list li').should('have.length', 3).last().should('have.text', newItem);",
              "err": {},
              "uuid": "7bbd717b-d910-4d3d-83ee-f212c7233526",
              "parentUUID": "d99bc4e9-fa55-480c-814a-ad5198c755fa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "can check off an item as completed",
              "fullTitle": "example to-do app can check off an item as completed",
              "timedOut": null,
              "duration": 407,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// In addition to using the `get` command to get an element by selector,\n// we can also use the `contains` command to get an element by its contents.\n// However, this will yield the <label>, which is lowest-level element that contains the text.\n// In order to check the item, we'll find the <input> element for this <label>\n// by traversing up the dom to the parent element. From there, we can `find`\n// the child checkbox <input> element and use the `check` command to check it.\ncy.contains('Pay electric bill').parent().find('input[type=checkbox]').check();\n// Now that we've checked the button, we can go ahead and make sure\n// that the list element is now marked as completed.\n// Again we'll use `contains` to find the <label> element and then use the `parents` command\n// to traverse multiple levels up the dom until we find the corresponding <li> element.\n// Once we get that element, we can assert that it has the completed class.\ncy.contains('Pay electric bill').parents('li').should('have.class', 'completed');",
              "err": {},
              "uuid": "3f9d6028-ba24-43f0-8fbe-76b1e79d47ce",
              "parentUUID": "d99bc4e9-fa55-480c-814a-ad5198c755fa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "9654e138-f943-4c10-b509-17f51d5f236a",
              "title": "with a checked task",
              "fullFile": "",
              "file": "",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "can filter for uncompleted tasks",
                  "fullTitle": "example to-do app with a checked task can filter for uncompleted tasks",
                  "timedOut": null,
                  "duration": 511,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We'll click on the \"active\" button in order to\n// display only incomplete items\ncy.contains('Active').click();\n// After filtering, we can assert that there is only the one\n// incomplete item in the list.\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Walk the dog');\n// For good measure, let's also assert that the task we checked off\n// does not exist on the page.\ncy.contains('Pay electric bill').should('not.exist');",
                  "err": {},
                  "uuid": "dbdb3af4-5d37-4001-a5dd-c9ac523c9d53",
                  "parentUUID": "9654e138-f943-4c10-b509-17f51d5f236a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can filter for completed tasks",
                  "fullTitle": "example to-do app with a checked task can filter for completed tasks",
                  "timedOut": null,
                  "duration": 446,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// We can perform similar steps as the test above to ensure\n// that only completed tasks are shown\ncy.contains('Completed').click();\ncy.get('.todo-list li').should('have.length', 1).first().should('have.text', 'Pay electric bill');\ncy.contains('Walk the dog').should('not.exist');",
                  "err": {},
                  "uuid": "855422e6-ff58-438e-a453-b6422f247f27",
                  "parentUUID": "9654e138-f943-4c10-b509-17f51d5f236a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "can delete all completed tasks",
                  "fullTitle": "example to-do app with a checked task can delete all completed tasks",
                  "timedOut": null,
                  "duration": 442,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// First, let's click the \"Clear completed\" button\n// `contains` is actually serving two purposes here.\n// First, it's ensuring that the button exists within the dom.\n// This button only appears when at least one task is checked\n// so this command is implicitly verifying that it does exist.\n// Second, it selects the button so we can click it.\ncy.contains('Clear completed').click();\n// Then we can make sure that there is only one element\n// in the list and our element does not exist\ncy.get('.todo-list li').should('have.length', 1).should('not.have.text', 'Pay electric bill');\n// Finally, make sure that the clear button no longer exists.\ncy.contains('Clear completed').should('not.exist');",
                  "err": {},
                  "uuid": "42525297-8d7a-4674-ace4-e26e86723315",
                  "parentUUID": "9654e138-f943-4c10-b509-17f51d5f236a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "dbdb3af4-5d37-4001-a5dd-c9ac523c9d53",
                "855422e6-ff58-438e-a453-b6422f247f27",
                "42525297-8d7a-4674-ace4-e26e86723315"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1399,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [
            "239ac92d-e52f-44a3-92ee-8e56d451040e",
            "7bbd717b-d910-4d3d-83ee-f212c7233526",
            "3f9d6028-ba24-43f0-8fbe-76b1e79d47ce"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3363,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}