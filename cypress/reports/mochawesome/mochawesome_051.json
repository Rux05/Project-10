{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 3,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-06T17:54:50.600Z",
    "end": "2024-07-06T17:54:55.441Z",
    "duration": 4841,
    "testsRegistered": 3,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "cdfb2529-ce39-44c0-850c-0b7c5d16bb4b",
      "title": "",
      "fullFile": "cypress\\e2e\\3-tests-API\\api.products.cy.js",
      "file": "cypress\\e2e\\3-tests-API\\api.products.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "6e7a1c17-bb02-4d34-a5f9-bf92ff70f7fd",
          "title": "API get products test",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should retrieve the list of products",
              "fullTitle": "API get products test should retrieve the list of products",
              "timedOut": null,
              "duration": 1699,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products`,\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"user\")}`,\n    \"Content-Type\": \"application/json\"\n  }\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"array\");\n  response.body.forEach(product => {\n    expect(product).to.have.property(\"id\");\n    expect(product).to.have.property(\"name\").that.is.a(\"string\");\n    expect(product).to.have.property(\"availableStock\").that.is.a(\"number\");\n    expect(product).to.have.property(\"skin\").that.is.a(\"string\");\n    expect(product).to.have.property(\"aromas\").that.is.a(\"string\");\n    expect(product).to.have.property(\"ingredients\").that.is.a(\"string\");\n    expect(product).to.have.property(\"description\").that.is.a(\"string\");\n    expect(product).to.have.property(\"price\").that.is.a(\"number\");\n    expect(product).to.have.property(\"picture\").that.is.a(\"string\");\n    expect(product).to.have.property(\"varieties\").that.is.a(\"number\");\n  });\n});",
              "err": {},
              "uuid": "60d262f3-9a3e-46dc-9276-e73e9272ebc7",
              "parentUUID": "6e7a1c17-bb02-4d34-a5f9-bf92ff70f7fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should retrieve product details by ID",
              "fullTitle": "API get products test should retrieve product details by ID",
              "timedOut": null,
              "duration": 1306,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const productId = 3;\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products/${productId}`\n}).then(response => {\n  expect(response.status).to.eq(200);\n  expect(response.body).to.be.an(\"object\");\n  expect(response.body).to.have.property(\"id\").that.is.a(\"number\");\n  expect(response.body).to.have.property(\"name\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"availableStock\").that.is.a(\"number\");\n  expect(response.body).to.have.property(\"skin\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"aromas\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"ingredients\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"description\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"price\").that.is.a(\"number\");\n  expect(response.body).to.have.property(\"picture\").that.is.a(\"string\");\n  expect(response.body).to.have.property(\"varieties\").that.is.a(\"number\");\n});",
              "err": {},
              "uuid": "cb5e3475-c9c1-4ca4-850d-bbb9ea2c1bc6",
              "parentUUID": "6e7a1c17-bb02-4d34-a5f9-bf92ff70f7fd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 404 for non-existent product ID",
              "fullTitle": "API get products test should return 404 for non-existent product ID",
              "timedOut": null,
              "duration": 1634,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const nonExistentId = 9999;\ncy.request({\n  method: \"GET\",\n  url: `${UrlApi}/products/${nonExistentId}`,\n  headers: {\n    Authorization: `Bearer ${localStorage.getItem(\"user\")}`\n  },\n  failOnStatusCode: false\n}).then(response => {\n  expect(response.status).to.eq(404);\n});",
              "err": {},
              "uuid": "2b8feb30-3fe6-4772-b3db-f5085ba4b513",
              "parentUUID": "6e7a1c17-bb02-4d34-a5f9-bf92ff70f7fd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "60d262f3-9a3e-46dc-9276-e73e9272ebc7",
            "cb5e3475-c9c1-4ca4-850d-bbb9ea2c1bc6",
            "2b8feb30-3fe6-4772-b3db-f5085ba4b513"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4639,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "id": "default",
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}